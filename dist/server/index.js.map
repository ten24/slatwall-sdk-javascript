{"version":3,"sources":["webpack://@ultracommerce/ultracommerce-sdk/webpack/universalModuleDefinition","webpack://@ultracommerce/ultracommerce-sdk/webpack/bootstrap","webpack://@ultracommerce/ultracommerce-sdk/webpack/runtime/compat get default export","webpack://@ultracommerce/ultracommerce-sdk/webpack/runtime/define property getters","webpack://@ultracommerce/ultracommerce-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@ultracommerce/ultracommerce-sdk/webpack/runtime/make namespace object","webpack://@ultracommerce/ultracommerce-sdk/./src/constants.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/BaseEndpoint.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/routes.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/endpoints/Auth.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/endpoints/Account.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/endpoints/Cart.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/helpers/parseParams.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/endpoints/Products.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/endpoints/ProductType.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/endpoints/Brand.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/endpoints/Category.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/endpoints/Option.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/endpoints/Location.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/endpoints/Order.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/endpoints/Content.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/endpoints/Type.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/endpoints/OrderTemplate.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/endpoints/General.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/endpoints/Quotes.ts","webpack://@ultracommerce/ultracommerce-sdk/external \"axios\"","webpack://@ultracommerce/ultracommerce-sdk/external \"qs\"","webpack://@ultracommerce/ultracommerce-sdk/./src/errors/SlatwallSDKError.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/errors/SlatwallError.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/errors/BasicSlatwallError.ts","webpack://@ultracommerce/ultracommerce-sdk/external \"lodash/get\"","webpack://@ultracommerce/ultracommerce-sdk/./src/errors/ExpandedSlatwallError.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/errors/MisconfigurationError.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/errors/NoResponseError.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/helpers/Result.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/interfaces/errors/ErrorClass.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/HttpService.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/SDKScope.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/Slatwall.ts","webpack://@ultracommerce/ultracommerce-sdk/./src/index.ts"],"names":["root","factory","exports","module","define","amd","a","i","global","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","GET","POST","sdkScope","this","Routes","params","keys","map","join","id","login","headers","source","httpService","slatwallResponse","result","isSuccess","bearerToken","success","token","generateToken","revokeToken","create","update","changePassword","forgotPassword","resetPassword","createGuestAccount","createGuestAccountPassword","verifyEmailAddress","sendEmailVerificationLink","addEmailAddress","setPrimaryEmailAddress","deleteEmailAddress","addPhoneNumber","setPrimaryPhoneNumber","deletePhoneNumber","addAddress","setPrimaryAddress","updateAddress","deleteAddress","addPaymentMethod","deletePaymentMethod","sePrimaryPaymentMethod","orders","cartsAndQuotes","orderFulfillments","orderDeliveries","giftCards","addGiftCard","updateGiftCardStatus","getGiftCardTransactions","subscriptionUsage","parentAccount","childAccounts","impersonateAccount","endImpersonation","updateNotes","addItem","addItems","updateItemQuantity","removeItem","availableShippingMethods","eligibleFulfillmentMethods","availablePaymentMethods","setPickupDate","clearOrderFulfillment","addShippingAddress","addShippingAddressUsingAccountAddress","addBillingAddressUsingAccountAddress","addShippingMethod","addPickupLocation","updateFulfillment","applyPromoCode","removePromoCode","addBillingAddress","addNewAccountAndSetAsBillingAddress","addEditAccountAndSetAsBillingAddress","addNewAddressAndAttachAsShipping","addEditAddressAndAttachAsShipping","addPayment","removePayment","placeOrder","clear","delete","addCartToSession","getPayPalClientConfigForCart","createPayPalAccountPaymentMethod","addProductBundleBuild","appliedPromotionCodes","appliedPayments","addGiftCardPayment","parseParams","parsedResult","perPage","page","sort","sortOrder","filter","list","getDetails","getSkuSelected","getSkuOptionDetails","search","getGallery","getImagePaths","getOptionsByOptionGroup","getFilterOptions","listSku","getSku","getRelatedProducts","getReviews","getStock","getBundles","createBundleBuild","getBundleBuild","removeBundleBuild","addProductReview","getPickupLocations","countries","states","addressOptions","duplicate","setOrderOnCart","getConfiguration","addFormResponse","getContentByPage","verifyRecaptcha","downloadFile","getTypesByTypeCode","createAndAddItem","addPromotionCode","removePromotionCode","getAppliedPromotionCodes","getPromotionProducts","removePromotionItems","createWishlist","addWishlistItem","addWishlistItemAndGetWishList","removeWishlistItem","removeWishlistItemAndGetWishList","shareWishlist","getWishlists","getWishListItems","getOrderTemplateItems","getOrderTemplateDetails","updateOrderTemplateShipping","updateOrderTemplateBilling","getCancellationReasonTypeOptions","getFrequencyTermOptions","getScheduleDateChangeReasonTypeOptions","editOrderTemplateItem","editOrderTemplate","updateOrderTemplateFrequency","updateOrderTemplateSchedule","cancelOrderTemplate","getEntity","createQuote","updateQuote","convertCartToQuote","submitQuoteForApproval","require","name","setPrototypeOf","SlatwallSDKError","Error","serverResponse","status","SlatwallError","reducedServerResponse","defineProperties","config","data","request","errorsSummary","BasicSlatwallError","summary","errors","ExpandedSlatwallError","reduce","acc","field","split","shift","node","length","getErrors","path","message","MisconfigurationError","NoResponseError","isFail","fail","makeSuccess","makeFail","ErrorClass","createHeaders","formattedHeaders","contentType","headerName","axios","baseURL","sdkConfig","host","withCredentials","paramsSerializer","arrayFormat","method","route","res","requestHeaders","cancelToken","Result","processError","classifyError","error","response","errorSummary","FULL","BASIC","LIMITED","processSlatwallError","errorClass","version","authToken","HttpService","checkBrowser","localStorage","getItem","setItem","window","SDKConfig","auth","account","cart","products","productType","brand","category","location","Location","option","order","content","type","orderTemplate","general","quotes","init"],"mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,IAPxE,CASGC,QAAQ,WACX,M,mBCTA,IAAIC,EAAsB,CCA1B,EAAyBN,IACxB,IAAIO,EAASP,GAAUA,EAAOQ,WAC7B,IAAOR,EAAiB,QACxB,IAAM,EAEP,OADAM,EAAoBG,EAAEF,EAAQ,CAAEJ,EAAGI,IAC5BA,GCLR,EAAwB,CAACR,EAASW,KACjC,IAAI,IAAIC,KAAOD,EACXJ,EAAoBM,EAAEF,EAAYC,KAASL,EAAoBM,EAAEb,EAASY,IAC5EE,OAAOC,eAAef,EAASY,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3E,EAAwB,CAACM,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClF,EAAyBnB,IACH,oBAAXuB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAef,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAef,EAAS,aAAc,CAAEyB,OAAO,M,wQCLhD,IAAMC,EAAc,MACdC,EAAe,O,QCI1B,SAAYC,GACVC,KAAKD,SAAWA,GCNb,I,EAAME,EAOS,SAACC,GACnB,gDAA0CjB,OAAOkB,KAAKD,GACnDE,KAAI,SAAArB,GAAO,OAAAA,EAAM,IAAMmB,EAAZnB,MACXsB,KAAK,KAAI,iBAVHJ,EA6IC,SAACK,GAAe,gCA7IjBL,EAgKK,SAACK,GAAe,6BAhKrBL,EAoKH,SAACK,GAAe,kCApKbL,EA4KD,SAACK,GAAe,8BA5KfL,EAgLE,SAACK,GAAe,iCAhLlBL,EAoLA,SAACK,GAAe,+BApLhBL,EAwLE,SAACK,GAAe,iC,uxDCjL/B,yB,+CA2BA,OA3BkC,OACnB,YAAAC,MAAb,SAAmBL,EAAuBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,yFAClD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EDRpD,kBCQ0EI,EAAQM,EAASC,I,OAOtG,OAPIG,EAAU,UACHC,YAETb,KAAKD,SAASe,YAAcF,EAAOG,UAAUC,MAE7ChB,KAAKD,SAASe,YAAc,KAE9B,GAAOF,WAGI,YAAAK,cAAb,SAA2Bf,EAAwBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,yFAC3D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EDnBpD,kBCmB0EI,EAAQM,EAASC,I,OAOtG,OAPIG,EAAU,UACHC,YAETb,KAAKD,SAASe,YAAcF,EAAOG,UAAUC,MAE7ChB,KAAKD,SAASe,YAAc,KAE9B,GAAOF,WAGI,YAAAM,YAAb,SAAyBhB,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFAE5D,OADRT,KAAKD,SAASe,YAAc,KACpB,GAAMd,KAAKD,SAASW,YAAYC,iBAAiBb,ED9B7C,mBC8BoEI,EAAQM,EAASC,I,OAAjG,SAAQ,kBAEZ,EA3BA,CAAkC,G,kzDCClC,yB,+CAgJA,OAhJqC,OACtB,YAAArB,IAAb,SAAiBc,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFACpD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EFPzC,uBEOmEK,EAAQM,EAASC,I,OAApG,SAAQ,kBAGG,YAAAU,OAAb,SAAoBjB,EAAwBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC1D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFVtC,0BEUoEI,EAAQM,EAASC,I,OAAxG,SAAQ,kBAGG,YAAAW,OAAb,SAAoBlB,EAAwBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC1D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFbtC,0BEaoEI,EAAQM,EAASC,I,OAAxG,SAAQ,kBAGG,YAAAY,eAAb,SAA4BnB,EAAgCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC1E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFhBrC,2BEgBoEI,EAAQM,EAASC,I,OAAzG,SAAQ,kBAGG,YAAAa,eAAb,SAA4BpB,EAAgCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC1E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFZrC,2BEYoEI,EAAQM,EAASC,I,OAAzG,SAAQ,kBAGG,YAAAc,cAAb,SAA2BrB,EAA+BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACxE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFftC,gCEeoEI,EAAQM,EAASC,I,OAAxG,SAAQ,kBAGG,YAAAe,mBAAb,SAAgCtB,EAAoCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAClF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFjBjC,yBEiBoEI,EAAQM,EAASC,I,OAA7G,SAAQ,kBAGG,YAAAgB,2BAAb,SAAwCvB,EAA4CM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAClG,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFpBzB,uCEoBoEI,EAAQM,EAASC,I,OAArH,SAAQ,kBAGG,YAAAiB,mBAAb,SAAgCxB,EAAoCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAClF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFtBjC,sCEsBoEI,EAAQM,EAASC,I,OAA7G,SAAQ,kBAGG,YAAAkB,0BAAb,SAAuCzB,EAA2CM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAChG,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFzB1B,qDEyBoEI,EAAQM,EAASC,I,OAApH,SAAQ,kBAGG,YAAAmB,gBAAb,SAA6B1B,EAAiCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC5E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EF1B7B,mCE0BoEI,EAAQM,EAASC,I,OAAjH,SAAQ,kBAGG,YAAAoB,uBAAb,SAAoC3B,EAAwCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC1F,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EF7B7B,mCE6BoEI,EAAQM,EAASC,I,OAAjH,SAAQ,kBAGG,YAAAqB,mBAAb,SAAgC5B,EAAoCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAClF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFhC1B,sCEgCoEI,EAAQM,EAASC,I,OAApH,SAAQ,kBAGG,YAAAsB,eAAb,SAA4B7B,EAAgCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC1E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFjC9B,kCEiCoEI,EAAQM,EAASC,I,OAAhH,SAAQ,kBAGG,YAAAuB,sBAAb,SAAmC9B,EAAuCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACxF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFpCvB,kCEoCoEI,EAAQM,EAASC,I,OAAvH,SAAQ,kBAGG,YAAAwB,kBAAb,SAA+B/B,EAAmCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAChF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFvC3B,qCEuCoEI,EAAQM,EAASC,I,OAAnH,SAAQ,kBAGG,YAAAyB,WAAb,SAAwBhC,EAA4BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAClE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFxClC,iCEwCoEI,EAAQM,EAASC,I,OAA5G,SAAQ,kBAGG,YAAA0B,kBAAb,SAA+BjC,EAAmCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAChF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EF3C3B,qCE2CoEI,EAAQM,EAASC,I,OAAnH,SAAQ,kBAGG,YAAA2B,cAAb,SAA2BlC,EAA+BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACxE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EF9C/B,iCE8CoEI,EAAQM,EAASC,I,OAA/G,SAAQ,kBAGG,YAAA4B,cAAb,SAA2BnC,EAA+BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACxE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFjD/B,iCEiDoEI,EAAQM,EAASC,I,OAA/G,SAAQ,kBAGG,YAAA6B,iBAAb,SAA8BpC,EAAkCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC9E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFlD5B,oCEkDoEI,EAAQM,EAASC,I,OAAlH,SAAQ,kBAGG,YAAA8B,oBAAb,SAAiCrC,EAAqCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACpF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFrDzB,uCEqDoEI,EAAQM,EAASC,I,OAArH,SAAQ,kBAGG,YAAA+B,uBAAb,SAAoCtC,EAAyCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC3F,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFxD5B,oCEwDoEI,EAAQM,EAASC,I,OAAlH,SAAQ,kBAGG,YAAAgC,OAAb,SAAoBvC,EAAwBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC1D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFzDnC,mCEyDoEI,EAAQM,EAASC,I,OAA3G,SAAQ,kBAGG,YAAAiC,eAAb,SAA4BxC,EAAgCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC1E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EF5DnC,2CE4DoEI,EAAQM,EAASC,I,OAA3G,SAAQ,kBAGG,YAAAkC,kBAAb,SAA+BzC,EAAmCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAChF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EF/DxB,8CE+DoEI,EAAQM,EAASC,I,OAAtH,SAAQ,kBAGG,YAAAmC,gBAAb,SAA6B1C,EAAiCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC5E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFlE1B,0CEkEoEI,EAAQM,EAASC,I,OAApH,SAAQ,kBAGG,YAAAoC,UAAb,SAAuB3C,EAA2BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAChE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EFrE9B,mCEqEmEK,EAAQM,EAASC,I,OAA/G,SAAQ,kBAGG,YAAAqC,YAAb,SAAyB5C,EAAsBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC7D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFpE/B,kCEoEoEI,EAAQM,EAASC,I,OAA/G,SAAQ,kBAGG,YAAAsC,qBAAb,SAAkC7C,EAA+BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC/E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFvE/B,kCEuEoEI,EAAQM,EAASC,I,OAA/G,SAAQ,kBAGG,YAAAuC,wBAAb,SAAqC9C,EAA+BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAClF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EF1E5B,qCE0EmEK,EAAQM,EAASC,I,OAAjH,SAAQ,kBAGG,YAAAwC,kBAAb,SAA+B/C,EAAmCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAChF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFpF/B,4CEoFoEI,EAAQM,EAASC,I,OAA/G,SAAQ,kBAGG,YAAAyC,cAAb,SAA2B1C,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACzC,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EFvFnC,iCEuFoE,GAAIU,EAASC,I,OAAvG,SAAQ,kBAGG,YAAA0C,cAAb,SAA2B3C,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACzC,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EF1FnC,+BE0FoE,GAAIU,EAASC,I,OAAvG,SAAQ,kBAGG,YAAA2C,mBAAb,SAAgClD,EAA+BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC7E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EAAKI,EAA0BC,GAAS,GAAIM,EAASC,I,OAA9G,SAAQ,kBAGG,YAAA4C,iBAAb,SAA8B7C,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC5C,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EF3InC,6DE2ImE,GAAIW,EAASC,I,OAAtG,SAAQ,kBAEZ,EAhJA,CAAqC,G,kzDCCrC,yB,+CAiJA,OAjJkC,OACnB,YAAArB,IAAb,SAAiBc,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFACpD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EHgD5C,yBGhDmEK,EAAQM,EAASC,I,OAAjG,SAAQ,kBAGG,YAAA6C,YAAb,SAAyBpD,EAA0BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACjE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EH+CnC,8BG/CmEK,EAAQM,EAASC,I,OAA1G,SAAQ,kBAGG,YAAA8C,QAAb,SAAqBrD,EAAsBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACzD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EH4CvC,0BG5CoEI,EAAQM,EAASC,I,OAAvG,SAAQ,kBAGG,YAAA+C,SAAb,SAAsBtD,EAAuBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC3D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHyCtC,2BGzCoEI,EAAQM,EAASC,I,OAAxG,SAAQ,kBAGG,YAAAgD,mBAAb,SAAgCvD,EAAiCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC/E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHsC5B,qCGtCoEI,EAAQM,EAASC,I,OAAlH,SAAQ,kBAGG,YAAAiD,WAAb,SAAwBxD,EAAyBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC/D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHmCpC,6BGnCoEI,EAAQM,EAASC,I,OAA1G,SAAQ,kBAGG,YAAAkD,yBAAb,SAAsCzD,EAAuCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC3F,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EHkCxB,yCGlCmEK,EAAQM,EAASC,I,OAArH,SAAQ,kBAGG,YAAAmD,2BAAb,SAAwC1D,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFAC3E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EH+BtB,2CG/BmEK,EAAQM,EAASC,I,OAAvH,SAAQ,kBAGG,YAAAoD,wBAAb,SAAqC3D,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFACxE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EH8BzB,wCG9BmEK,EAAQM,EAASC,I,OAApH,SAAQ,kBAGG,YAAAqD,cAAb,SAA2B5D,EAA4BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACrE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EHwBtC,2BGxBmEK,EAAQM,EAASC,I,OAAvG,SAAQ,kBAGG,YAAAsD,sBAAb,SAAmC7D,EAAoCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACrF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EHqB9B,mCGrBmEK,EAAQM,EAASC,I,OAA/G,SAAQ,kBAGG,YAAAuD,mBAAb,SAAgC9D,EAAiCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC/E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHsB5B,qCGtBoEI,EAAQM,EAASC,I,OAAlH,SAAQ,kBAGG,YAAAwD,sCAAb,SAAmD/D,EAAoDM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACrH,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHmBT,mDGnBoEI,EAAQM,EAASC,I,OAArI,SAAQ,kBAGG,YAAAyD,qCAAb,SAAkDhE,EAAmDM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACnH,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHgBV,kDGhBoEI,EAAQM,EAASC,I,OAApI,SAAQ,kBAGG,YAAA0D,kBAAb,SAA+BjE,EAAgCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC7E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHalC,oDGboEI,EAAQM,EAASC,I,OAA5G,SAAQ,kBAGG,YAAA2D,kBAAb,SAA+BlE,EAAgCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC7E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHUlC,0CGVoEI,EAAQM,EAASC,I,OAA5G,SAAQ,kBAGG,YAAA4D,kBAAb,SAA+BnE,EAAgCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC7E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHO9B,oCGPoEI,EAAQM,EAASC,I,OAAhH,SAAQ,kBAGG,YAAA6D,eAAb,SAA4BpE,EAA6BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACvE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHKvC,8BGLoEI,EAAQM,EAASC,I,OAAvG,SAAQ,kBAGG,YAAA8D,gBAAb,SAA6BrE,EAA8BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACzE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHEpC,iCGFoEI,EAAQM,EAASC,I,OAA1G,SAAQ,kBAGG,YAAA+D,kBAAb,SAA+BtE,EAAgCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC7E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHAlC,+BGAoEI,EAAQM,EAASC,I,OAA5G,SAAQ,kBAGG,YAAAgE,oCAAb,SAAiDvE,EAAkBM,EAAwBC,G,YAA1C,IAAAP,MAAA,SAAkB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFACjF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHHhB,uEGGoEI,EAAQM,EAASC,I,OAA9H,SAAQ,kBAGG,YAAAiE,qCAAb,SAAkDxE,EAAkBM,EAAwBC,G,YAA1C,IAAAP,MAAA,SAAkB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFAClF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHNf,wEGMoEI,EAAQM,EAASC,I,OAA/H,SAAQ,kBAGG,YAAAkE,iCAAb,SAA8CzE,EAAkBM,EAAwBC,G,YAA1C,IAAAP,MAAA,SAAkB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFAC9E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHTnB,wEGSoEI,EAAQM,EAASC,I,OAA3H,SAAQ,kBAGG,YAAAmE,kCAAb,SAA+C1E,EAAkBM,EAAwBC,G,YAA1C,IAAAP,MAAA,SAAkB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFAC/E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHZlB,yEGYoEI,EAAQM,EAASC,I,OAA5H,SAAQ,kBAGG,YAAAoE,WAAb,SAAwB3E,EAAyBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC/D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHfpC,6BGeoEI,EAAQM,EAASC,I,OAA1G,SAAQ,kBAGG,YAAAqE,cAAb,SAA2B5E,EAA4BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACrE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHdjC,gCGcoEI,EAAQM,EAASC,I,OAA7G,SAAQ,kBAGG,YAAAsE,WAAb,SAAwB7E,EAAyBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC/D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHhBzC,wBGgBoEI,EAAQM,EAASC,I,OAArG,SAAQ,kBAGG,YAAAuE,MAAb,SAAmB9E,EAAoBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACrD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EH1D1C,wBG0DmEK,EAAQM,EAASC,I,OAAnG,SAAQ,kBAGG,YAAAwE,OAAb,SAAoB/E,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFACvD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHlBxC,yBGkBoEI,EAAQM,EAASC,I,OAAtG,SAAQ,kBAIG,YAAAyE,iBAAb,SAA8BhF,EAAkBM,EAAwBC,G,YAA1C,IAAAP,MAAA,SAAkB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFAC9D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHpEnC,8BGoEoEI,EAAQM,EAASC,I,OAA3G,SAAQ,kBAGG,YAAA0E,6BAAb,SAA0C3E,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACxD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EHtCvB,0CGsCmE,GAAIW,EAASC,I,OAAlH,SAAQ,kBAGG,YAAA2E,iCAAb,SAA8ClF,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFACjF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EHzCnB,8CGyCmEK,EAAQM,EAASC,I,OAA1H,SAAQ,kBAGG,YAAA4E,sBAAb,SAAmCnF,EAAoCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACrF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EHzE7B,oCGyEoEI,EAAQM,EAASC,I,OAAjH,SAAQ,kBAGG,YAAA6E,sBAAb,SAAmCpF,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFACtE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EHtE3B,sCGsEmEK,EAAQM,EAASC,I,OAAlH,SAAQ,kBAGG,YAAA8E,gBAAb,SAA6BrF,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFAChE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EHzEjC,gCGyEmEK,EAAQM,EAASC,I,OAA5G,SAAQ,kBAGG,YAAA+E,mBAAb,SAAgCtF,EAAyBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACvE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EH3D5B,qCG2DoEI,EAAQM,EAASC,I,OAAlH,SAAQ,kBAEZ,EAjJA,CAAkC,GCP3B,IAAMgF,EAAc,SAACvF,QAAA,IAAAA,MAAA,IAC1B,IAAIwF,EAAe,GAcnB,GAZIxF,EAAOyF,UACTD,EAAa,UAAYxF,EAAOyF,SAG9BzF,EAAO0F,OACTF,EAAa,aAAexF,EAAO0F,MAGjC1F,EAAO2F,MAAQ3F,EAAO4F,YACxBJ,EAAY,QAAcxF,EAAO2F,KAAO,IAAM3F,EAAO4F,WAGnD5F,EAAO6F,OACT,IAAgB,UAAA9G,OAAOkB,KAAKD,EAAO6F,QAAnB,eAA4B,CAAvC,IAAIhH,EAAG,KACC,IAAPA,GAAoC,KAAvBmB,EAAO6F,OAAOhH,KAC7B2G,EAAa,KAAO3G,GAAOmB,EAAO6F,OAAOhH,IAI/C,OAAO2G,G,8yDCZT,yB,+CAiFA,OAjFsC,OACvB,YAAAM,KAAb,SAAkB9F,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFACrD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EL8HxC,sBK9HmE4F,EAAYvF,GAASM,EAASC,I,OAAlH,SAAQ,kBAGG,YAAArB,IAAb,SAAiBkB,EAAYE,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC3C,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EAAKI,EAAkBK,GAAKE,EAASC,I,OAA9F,SAAQ,kBAGG,YAAAwF,WAAb,SAAwB/F,EAA6BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACnE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,ELwHlC,+BKxHmEK,EAAQM,EAASC,I,OAA3G,SAAQ,kBAGG,YAAAyF,eAAb,SAA4BhG,EAA6BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACvE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,ELqHjC,gCKrHmEK,EAAQM,EAASC,I,OAA5G,SAAQ,kBAGG,YAAA0F,oBAAb,SAAiCjG,EAA6BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC5E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,ELkHhC,iCKlHmEK,EAAQM,EAASC,I,OAA7G,SAAQ,kBAGG,YAAA2F,OAAb,SAAoBlG,EAAkBM,EAAwBC,G,YAA1C,IAAAP,MAAA,SAAkB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFACpD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,ELwHtC,2BKxHmEK,EAAQM,EAASC,I,OAAvG,SAAQ,kBAGG,YAAA4F,WAAb,SAAwBnG,EAA6BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACnE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EL+GlC,mCK/GoEI,EAAQM,EAASC,I,OAA5G,SAAQ,kBAGG,YAAA6F,cAAb,SAA2BpG,EAAgCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACzE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,ELiHvB,0CKjHoEI,EAAQM,EAASC,I,OAAvH,SAAQ,kBAGG,YAAA8F,wBAAb,SAAqCrG,EAA0CM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC7F,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,ELmGrB,4CKnGmEK,EAAQM,EAASC,I,OAAxH,SAAQ,kBAGG,YAAA+F,iBAAb,SAA8BtG,EAAmCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC/E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,ELgG5B,qCKhGmEK,EAAQM,EAASC,I,OAAjH,SAAQ,kBAGG,YAAAgG,QAAb,SAAqBvG,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFACxD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EL6G5C,wBK7GmE4F,EAAYvF,GAASM,EAASC,I,OAA9G,SAAQ,kBAGG,YAAAiG,OAAb,SAAoBpG,EAAYE,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC1C,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EAAKI,EAAcK,GAAK,GAAIE,EAASC,I,OAClG,SADY,kBAID,YAAAkG,mBAAb,SAAgCzG,EAAqCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACnF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,ELoFjC,gCKpFoEI,EAAQM,EAASC,I,OAA7G,SAAQ,kBAGG,YAAAmG,WAAb,SAAwB1G,EAA6BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACnE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,ELiFlC,+BKjFoEI,EAAQM,EAASC,I,OAA5G,SAAQ,kBAGG,YAAAoG,SAAb,SAAsB3G,EAA2BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC/D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EL8FxC,yBK9FoEI,EAAQM,EAASC,I,OAAtG,SAAQ,kBAGG,YAAAqG,WAAb,SAAwB5G,EAA6BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACnE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EL2ElC,8BK3EoEI,EAAQM,EAASC,I,OAA5G,SAAQ,kBAGG,YAAAsG,kBAAb,SAA+B7G,EAAoCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACjF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,ELwE3B,qCKxEoEI,EAAQM,EAASC,I,OAAnH,SAAQ,kBAGG,YAAAuG,eAAb,SAA4B9G,EAAiCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC3E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,ELqE9B,kCKrEoEI,EAAQM,EAASC,I,OAAhH,SAAQ,kBAGG,YAAAwG,kBAAb,SAA+B/G,EAAoCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACjF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,ELkE3B,qCKlEoEI,EAAQM,EAASC,I,OAAnH,SAAQ,kBAGG,YAAAyG,iBAAb,SAA8BhH,EAA4BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACxE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,ELiEnC,8BKjEoEI,EAAQM,EAASC,I,OAA3G,SAAQ,kBAEZ,EAjFA,CAAsC,G,kzDCJtC,yB,+CAQA,OARyC,OAC1B,YAAAuF,KAAb,SAAkB9F,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFACrD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,ENqJpC,mBMrJmE4F,EAAYvF,GAASM,EAASC,I,OAAtH,SAAQ,kBAGG,YAAArB,IAAb,SAAiBkB,EAAYE,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC3C,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EAAKI,EAAsBK,GAAK,GAAIE,EAASC,I,OAAtG,SAAQ,kBAEZ,EARA,CAAyC,G,kzDCAzC,yB,+CAQA,OARmC,OACpB,YAAAuF,KAAb,SAAkB9F,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFACrD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EPiK1C,oBOjKmE4F,EAAYvF,GAASM,EAASC,I,OAAhH,SAAQ,kBAGG,YAAArB,IAAb,SAAiBkB,EAAYE,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC3C,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EAAKI,EAAgBK,GAAK,GAAIE,EAASC,I,OAAhG,SAAQ,kBAEZ,EARA,CAAmC,G,kzDCAnC,yB,+CAQA,OARsC,OACvB,YAAAuF,KAAb,SAAkB9F,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFACrD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,ERqKvC,uBQrKmE4F,EAAYvF,GAASM,EAASC,I,OAAnH,SAAQ,kBAGG,YAAArB,IAAb,SAAiBkB,EAAYE,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC3C,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EAAKI,EAAmBK,GAAK,GAAIE,EAASC,I,OAAnG,SAAQ,kBAEZ,EARA,CAAsC,G,kzDCAtC,yB,+CAQA,OARoC,OACrB,YAAAuF,KAAb,SAAkB9F,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFACrD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,ETyKzC,qBSzKmE4F,EAAYvF,GAASM,EAASC,I,OAAjH,SAAQ,kBAGG,YAAArB,IAAb,SAAiBkB,EAAYE,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC3C,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EAAKI,EAAiBK,GAAK,GAAIE,EAASC,I,OAAjG,SAAQ,kBAEZ,EARA,CAAoC,G,kzDCApC,yB,+CAwBA,OAxBoC,OACrB,YAAAuF,KAAb,SAAkB9F,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,mFACrD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EV6KvC,uBU7KmE4F,EAAYvF,GAASM,EAASC,I,OAAnH,SAAQ,kBAGG,YAAArB,IAAb,SAAiBkB,EAAYE,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC3C,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EAAKI,EAAmBK,GAAK,GAAIE,EAASC,I,OAAnG,SAAQ,kBAGG,YAAA0G,mBAAb,SAAgC3G,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFAC9C,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EVuKjC,gCUvKmE,GAAIW,EAASC,I,OAAxG,SAAQ,kBAGG,YAAA2G,UAAb,SAAuB5G,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACrC,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EVoKvC,0BUpKmE,GAAIW,EAASC,I,OAAlG,SAAQ,kBAGG,YAAA4G,OAAb,SAAoBnH,EAAiCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACnE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EVkK1C,6CUlKmEK,EAAQM,EAASC,I,OAAnG,SAAQ,kBAGG,YAAA6G,eAAb,SAA4BpH,EAAYM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,mFACtD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EV6JlC,4CU7JmEK,EAAQM,EAASC,I,OAA3G,SAAQ,kBAEZ,EAxBA,CAAoC,G,ozDCApC,yB,+CAgBA,OAhBmC,OACpB,YAAArB,IAAb,SAAiBc,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,oFACpD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EX4FpC,6BW5FoEI,EAAQM,EAASC,I,OAA1G,SAAQ,kBAGG,YAAA8G,UAAb,SAAuBrH,EAAyBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,oFAC9D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EXyFrC,4BWzFoEI,EAAQM,EAASC,I,OAAzG,SAAQ,kBAGG,YAAAwE,OAAb,SAAoB/E,EAAsBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,oFACxD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EXuFxC,yBWvFoEI,EAAQM,EAASC,I,OAAtG,SAAQ,kBAGG,YAAA+G,eAAb,SAA4BtH,EAA8BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,oFACxE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EXkFxC,yBWlFoEI,EAAQM,EAASC,I,OAAtG,SAAQ,kBAEZ,EAhBA,CAAmC,G,szDCAnC,yB,+CAwBA,OAxBqC,QACtB,YAAArB,IAAb,SAAiBc,EAAsBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACrD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EZwLzC,sBYxLmEK,EAAQM,EAASC,I,OAApG,SAAQ,kBAGG,YAAAgH,iBAAb,SAA8BvH,EAAkCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC9E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EZqLnC,8BYrLmEK,EAAQM,EAASC,I,OAA1G,SAAQ,kBAGG,YAAAiH,gBAAb,SAA6BxH,EAAkBM,EAAwBC,G,YAA1C,IAAAP,MAAA,SAAkB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,qFAC7D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EZ+KpC,6BY/KoEI,EAAQM,EAASC,I,OAA1G,SAAQ,kBAGG,YAAAkH,iBAAb,SAA8BzH,EAAwBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACpE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EZ+KnC,8BY/KoEI,EAAQM,EAASC,I,OAA3G,SAAQ,kBAGG,YAAAmH,gBAAb,SAA6B1H,EAA0BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACrE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EZ4KpC,6BY5KoEI,EAAQM,EAASC,I,OAA1G,SAAQ,kBAGG,YAAAoH,aAAb,SAA0B3H,EAAuBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC/D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EZyKvC,0BYzKoEI,EAAQM,EAASC,I,OAAvG,SAAQ,kBAEZ,EAxBA,CAAqC,G,ueCArC,yB,+CAIA,OAJkC,QACnB,YAAAqH,mBAAb,SAAgC5H,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,knCACnE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,Eb8J3B,qCa9JmEK,EAAQM,EAASC,I,OAAlH,SAAQ,e,gSAEZ,EAJA,CAAkC,G,szDCClC,yB,+CAuHA,OAvH2C,QAC5B,YAAAU,OAAb,SAAoBjB,EAA8BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAChE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EdiGhC,gCcjGmEK,EAAQM,EAASC,I,OAA7G,SAAQ,kBAGG,YAAA8C,QAAb,SAAqBrD,EAA+BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAClE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,Ed8F/B,iCc9FmEK,EAAQM,EAASC,I,OAA9G,SAAQ,kBAGG,YAAAsH,iBAAb,SAA8B7H,EAAwCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACpF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,Ed2F3B,qCc3FmEK,EAAQM,EAASC,I,OAAlH,SAAQ,kBAGG,YAAAiD,WAAb,SAAwBxD,EAAkCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACxE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EdwF5B,oCcxFmEK,EAAQM,EAASC,I,OAAjH,SAAQ,kBAGG,YAAAuH,iBAAb,SAA8B9H,EAAwCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACpF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EdsFtB,0CctFmEK,EAAQM,EAASC,I,OAAvH,SAAQ,kBAGG,YAAAwH,oBAAb,SAAiC/H,EAA2CM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC1F,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EdoFnB,6CcpFmEK,EAAQM,EAASC,I,OAA1H,SAAQ,kBAGG,YAAAyH,yBAAb,SAAsChI,EAA2BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC/E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,Ed+Ed,kDc/EmEK,EAAQM,EAASC,I,OAA/H,SAAQ,kBAGG,YAAA0H,qBAAb,SAAkCjI,EAA+CM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC/F,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,Ed6ElB,8Cc7EmEK,EAAQM,EAASC,I,OAA3H,SAAQ,kBAGG,YAAA2H,qBAAb,SAAkClI,EAA+CM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC/F,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,Ed0EtB,0Cc1EmEK,EAAQM,EAASC,I,OAAvH,SAAQ,kBAGG,YAAAuF,KAAb,SAAkB9F,EAA4BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC5D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EdiElC,8BcjEmEK,EAAQM,EAASC,I,OAA3G,SAAQ,kBAGG,YAAA4H,eAAb,SAA4BnI,EAA8BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACxE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EdmErC,2BcnEmEK,EAAQM,EAASC,I,OAAxG,SAAQ,kBAGG,YAAA6H,gBAAb,SAA6BpI,EAA+BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC1E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EdgEpC,4BchEmEK,EAAQM,EAASC,I,OAAzG,SAAQ,kBAEG,YAAA8H,8BAAb,SAA2CrI,EAA+BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACxF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EdkEtB,6CclEoEI,EAAQM,EAASC,I,OAAxH,SAAQ,kBAGG,YAAA+H,mBAAb,SAAgCtI,EAA6BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC3E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,Ed0DjC,+Bc1DmEK,EAAQM,EAASC,I,OAA5G,SAAQ,kBAGG,YAAAgI,iCAAb,SAA8CvI,EAA6BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACzF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,Ed2DnB,gDc3DoEI,EAAQM,EAASC,I,OAA3H,SAAQ,kBAGG,YAAAiI,cAAb,SAA2BxI,EAAwBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACjE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EdoDtC,0BcpDmEK,EAAQM,EAASC,I,OAAvG,SAAQ,kBAGG,YAAAkI,aAAb,SAA0BnI,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACxC,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,Ed+CvC,wBc/CmE,GAAIW,EAASC,I,OAAlG,SAAQ,kBAGG,YAAAmI,iBAAb,SAA8BpI,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC5C,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,Ed6CnC,6Bc7CmE,GAAIW,EAASC,I,OAAtG,SAAQ,kBAGG,YAAAoI,sBAAb,SAAmC3I,EAA2BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC5E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,Ed4C9B,kCc5CmEK,EAAQM,EAASC,I,OAA/G,SAAQ,kBAGG,YAAAqI,wBAAb,SAAqC5I,EAA2BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC9E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EdyC5B,oCczCmEK,EAAQM,EAASC,I,OAAjH,SAAQ,kBAGG,YAAAsI,4BAAb,SAAyC7I,EAAsCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC7F,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EdsCxB,wCctCoEI,EAAQM,EAASC,I,OAAtH,SAAQ,kBAGG,YAAAuI,2BAAb,SAAwC9I,EAAsCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC5F,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EdmCzB,uCcnCoEI,EAAQM,EAASC,I,OAArH,SAAQ,kBAGG,YAAAwI,iCAAb,SAA8CzI,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC5D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EdgCnB,6CchCmE,GAAIW,EAASC,I,OAAtH,SAAQ,kBAGG,YAAAyI,wBAAb,SAAqC1I,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACnD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,Ed6B5B,oCc7BmE,GAAIW,EAASC,I,OAA7G,SAAQ,kBAGG,YAAA0I,uCAAb,SAAoD3I,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAClE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,Ed0Bb,mDc1BmE,GAAIW,EAASC,I,OAA5H,SAAQ,kBAGG,YAAA2I,sBAAb,SAAmClJ,EAAgCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACjF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EduB9B,kCcvBoEI,EAAQM,EAASC,I,OAAhH,SAAQ,kBAGG,YAAA4I,kBAAb,SAA+BnJ,EAA4BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACzE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EdoBlC,8BcpBoEI,EAAQM,EAASC,I,OAA5G,SAAQ,kBAGG,YAAA6I,6BAAb,SAA0CpJ,EAAqCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC7F,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EdiBvB,yCcjBoEI,EAAQM,EAASC,I,OAAvH,SAAQ,kBAGG,YAAA8I,4BAAb,SAAyCrJ,EAAoCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC3F,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EdexB,wCcfoEI,EAAQM,EAASC,I,OAAtH,SAAQ,kBAGG,YAAA+I,oBAAb,SAAiCtJ,EAA2CM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC1F,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EdUhC,gCcVoEI,EAAQM,EAASC,I,OAA9G,SAAQ,kBAEZ,EAvHA,CAA2C,G,ueCD3C,yB,+CAIA,OAJqC,QACtB,YAAAgJ,UAAb,SAAuBvJ,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,knCAC1D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,Ef0L1C,wBe1LmEK,EAAQM,EAASC,I,OAAnG,SAAQ,e,gSAEZ,EAJA,CAAqC,G,szDCCrC,yB,+CAyIA,OAzIoC,QACrB,YAAArB,IAAb,SAAiBc,EAAmBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAClD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EhBgM3C,sBgBhMmEK,EAAQM,EAASC,I,OAAlG,SAAQ,kBAGG,YAAA6C,YAAb,SAAyBpD,EAAqBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC5D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhB+CnC,8BgB/CoEI,EAAQM,EAASC,I,OAA3G,SAAQ,kBAGG,YAAA8C,QAAb,SAAqBrD,EAAuBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC1D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhB4CvC,0BgB5CoEI,EAAQM,EAASC,I,OAAvG,SAAQ,kBAGG,YAAA+C,SAAb,SAAsBtD,EAAuBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC3D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhByCtC,2BgBzCoEI,EAAQM,EAASC,I,OAAxG,SAAQ,kBAGG,YAAAgD,mBAAb,SAAgCvD,EAAkCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAChF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBsC5B,qCgBtCoEI,EAAQM,EAASC,I,OAAlH,SAAQ,kBAGG,YAAAiD,WAAb,SAAwBxD,EAA0BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAChE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBmCpC,6BgBnCoEI,EAAQM,EAASC,I,OAA1G,SAAQ,kBAGG,YAAAkD,yBAAb,SAAsCzD,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,qFACzE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EhBkCxB,yCgBlCmEK,EAAQM,EAASC,I,OAArH,SAAQ,kBAGG,YAAAmD,2BAAb,SAAwC1D,EAAmBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACzE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EhB+BtB,2CgB/BmEK,EAAQM,EAASC,I,OAAvH,SAAQ,kBAGG,YAAAoD,wBAAb,SAAqC3D,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,qFACxE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EhB8BzB,wCgB9BmEK,EAAQM,EAASC,I,OAApH,SAAQ,kBAGG,YAAAqD,cAAb,SAA2B5D,EAA6BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACtE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBwBtC,2BgBxBoEI,EAAQM,EAASC,I,OAAxG,SAAQ,kBAGG,YAAAsD,sBAAb,SAAmC7D,EAAqCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACtF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBqB9B,mCgBrBoEI,EAAQM,EAASC,I,OAAhH,SAAQ,kBAGG,YAAAuD,mBAAb,SAAgC9D,EAA+BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC7E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBsB5B,qCgBtBoEI,EAAQM,EAASC,I,OAAlH,SAAQ,kBAGG,YAAAwD,sCAAb,SAAmD/D,EAAqDM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACtH,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBmBT,mDgBnBoEI,EAAQM,EAASC,I,OAArI,SAAQ,kBAGG,YAAAyD,qCAAb,SAAkDhE,EAAoDM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACpH,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBgBV,kDgBhBoEI,EAAQM,EAASC,I,OAApI,SAAQ,kBAGG,YAAA0D,kBAAb,SAA+BjE,EAAiCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC9E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBalC,oDgBboEI,EAAQM,EAASC,I,OAA5G,SAAQ,kBAGG,YAAA2D,kBAAb,SAA+BlE,EAAiCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC9E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBUlC,0CgBVoEI,EAAQM,EAASC,I,OAA5G,SAAQ,kBAGG,YAAA4D,kBAAb,SAA+BnE,EAAiCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC9E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBO9B,oCgBPoEI,EAAQM,EAASC,I,OAAhH,SAAQ,kBAGG,YAAA6D,eAAb,SAA4BpE,EAA8BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACxE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBKvC,8BgBLoEI,EAAQM,EAASC,I,OAAvG,SAAQ,kBAGG,YAAA8D,gBAAb,SAA6BrE,EAA+BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC1E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBEpC,iCgBFoEI,EAAQM,EAASC,I,OAA1G,SAAQ,kBAGG,YAAA+D,kBAAb,SAA+BtE,EAAiCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC9E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBAlC,+BgBAoEI,EAAQM,EAASC,I,OAA5G,SAAQ,kBAGG,YAAAgE,oCAAb,SAAiDvE,EAAkBM,EAAwBC,G,YAA1C,IAAAP,MAAA,SAAkB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,qFACjF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBHhB,uEgBGoEI,EAAQM,EAASC,I,OAA9H,SAAQ,kBAGG,YAAAiE,qCAAb,SAAkDxE,EAAkBM,EAAwBC,G,YAA1C,IAAAP,MAAA,SAAkB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,qFAClF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBNf,wEgBMoEI,EAAQM,EAASC,I,OAA/H,SAAQ,kBAGG,YAAAkE,iCAAb,SAA8CzE,EAAkBM,EAAwBC,G,YAA1C,IAAAP,MAAA,SAAkB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,qFAC9E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBTnB,wEgBSoEI,EAAQM,EAASC,I,OAA3H,SAAQ,kBAGG,YAAAmE,kCAAb,SAA+C1E,EAAkBM,EAAwBC,G,YAA1C,IAAAP,MAAA,SAAkB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,qFAC/E,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBZlB,yEgBYoEI,EAAQM,EAASC,I,OAA5H,SAAQ,kBAGG,YAAAoE,WAAb,SAAwB3E,EAA0BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAChE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBfpC,6BgBeoEI,EAAQM,EAASC,I,OAA1G,SAAQ,kBAGG,YAAAqE,cAAb,SAA2B5E,EAA6BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACtE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBdjC,gCgBcoEI,EAAQM,EAASC,I,OAA7G,SAAQ,kBAGG,YAAAsE,WAAb,SAAwB7E,EAA0BM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAChE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBhBzC,wBgBgBoEI,EAAQM,EAASC,I,OAArG,SAAQ,kBAGG,YAAAuE,MAAb,SAAmB9E,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,qFACtD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EhB1D1C,wBgB0DmEK,EAAQM,EAASC,I,OAAnG,SAAQ,kBAGG,YAAAwE,OAAb,SAAoB/E,EAAmBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACrD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBlBxC,yBgBkBoEI,EAAQM,EAASC,I,OAAtG,SAAQ,kBAIG,YAAAuF,KAAb,SAAkB9F,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,qFACrD,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBd,EhB0E1C,uBgB1EmEK,EAAQM,EAASC,I,OAAnG,SAAQ,kBAGG,YAAAiJ,YAAb,SAAyBxJ,EAAsBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC7D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBwExC,yBgBxEoEI,EAAQM,EAASC,I,OAAtG,SAAQ,kBAGG,YAAAkJ,YAAb,SAAyBzJ,EAAsBM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFAC7D,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBsExC,yBgBtEoEI,EAAQM,EAASC,I,OAAtG,SAAQ,kBAGG,YAAAmJ,mBAAb,SAAgC1J,EAAqBM,EAAwBC,G,YAA7C,IAAAP,MAAA,SAAqB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,qFACnE,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhBiEjC,gCgBjEoEI,EAAQM,EAASC,I,OAA7G,SAAQ,kBAGG,YAAAoJ,uBAAb,SAAoC3J,EAAiCM,EAAwBC,G,YAAxB,IAAAD,MAAA,SAAwB,IAAAC,MAAA,M,qFACnF,SAAMT,KAAKD,SAASW,YAAYC,iBAAiBb,EhB+D7B,oCgB/DoEI,EAAQM,EAASC,I,OAAjH,SAAQ,kBAEZ,EAzIA,CAAoC,GCT9B,GAA+BqJ,QAAQ,S,eCA7C,MAAM,GAA+BA,QAAQ,M,ueCA7C,YACE,WAAYC,GAAZ,MACE,YAAMA,IAAK,K,OACT9K,OAAe+K,eAAe,EAAMC,EAAiB1K,W,EAE3D,OAL8C,QAK9C,EALA,CAA8C2K,O,wrBCG9C,YAGE,WAAYC,GAAZ,MACE,YAAM,4BAA4BA,EAAeC,OAAM,gBAAc,KACnEnL,OAAe+K,eAAe,EAAMK,EAAc9K,WACpD,EAAKwK,KAAO,aACZ,IAAMO,EAAwB,GAAH,GAAQH,G,OAEnClL,OAAOsL,iBAAiBD,EAAuB,CAC7CE,OAAQ,CAAErL,YAAY,GACtBsL,KAAM,CAAEtL,YAAY,GACpBqB,QAAS,CAAErB,YAAY,GACvBuL,QAAS,CAAEvL,YAAY,KAEzB,EAAKgL,eAAiBG,E,EAE1B,OAjB2C,QAiB3C,EAjBA,CAA2C,I,8dCW3C,SAXA,YAGE,WAAYH,EAA+BQ,GAA3C,MACE,YAAMR,IAAe,K,OACnBlL,OAAe+K,eAAe,EAAMY,EAAmBrL,WACzD,EAAKwK,KAAO,qBACZ,EAAKc,QAAUF,E,EAEnB,OATiC,QASjC,EATA,CAAiC,ICH3B,GAA+Bb,QAAQ,c,kfCI7C,YAGE,WAAYK,EAA+BQ,EAAuBG,GAAlE,MACE,YAAMX,EAAgBQ,IAAc,K,OAClC1L,OAAe+K,eAAe,EAAMe,EAAsBxL,WAC5D,EAAKwK,KAAO,wBACZ,EAAKe,OAAS7L,OAAOkB,KAAK2K,GAAQE,QAAO,SAACC,EAAKC,GAI7C,IAHA,IAAM/K,EAAO+K,EAAMC,MAAM,KACrBpM,EAAMoB,EAAKiL,QACXC,EAAOJ,EACJlM,GACAsM,EAAKtM,KACY,IAAhBoB,EAAKmL,OACPD,EAAKtM,GAAO+L,EAAOI,GAEnBG,EAAKtM,GAAO,IAGhBsM,EAAOA,EAAKtM,GACZA,EAAMoB,EAAKiL,QAEb,OAAOH,IACN,I,EAMP,OA7BmD,QA0B1C,YAAAM,UAAP,SAAiBC,GACf,OAAO,KAAIxL,KAAK8K,OAAQU,EAAM,OAElC,EA7BA,CAAmD,I,ueCFnD,YACE,WAAYC,GAAZ,MACE,YAAM,4BAA4BA,IAAU,K,OAC1CxM,OAAe+K,eAAe,EAAM0B,EAAsBnM,WAC5D,EAAKwK,KAAO,wB,EAEhB,OANmD,QAMnD,EANA,CAAmD,I,ueCAnD,YACE,mBACE,YAAM,oCAAkC,K,OACtC9K,OAAe+K,eAAe,EAAM2B,EAAgBpM,WACtD,EAAKwK,KAAO,kB,EAEhB,OAN6C,QAM7C,EANA,CAA6C,ICsB7C,IACEhJ,QAAS,SAAOnB,GAA6B,OAvB3B,SAACA,GACnB,MAAO,CACLiB,UAAW,WAAM,UACjB+K,OAAQ,WAAM,UACd7K,QAAS,WAAM,OAAAnB,GACfiM,KAAM,WACJ,MAAM,IAAI3B,MAAM,oCAiByB4B,CAAA,IAC7CD,KAAM,SAAOjM,GAA6B,OAb3B,SAACA,GAChB,MAAO,CACLiB,UAAW,WAAM,UACjB+K,OAAQ,WAAM,UACd7K,QAAS,WACP,MAAM,IAAImJ,MAAM,mCAElB2B,KAAM,WAAM,OAAAjM,IAM4BmM,CAAA,KC1B5C,IAAYC,IAAZ,SAAYA,GACV,qBACA,mBACA,yBAHF,CAAYA,QAAU,K,ICWtB,cAKE,WAAYjM,GAAZ,WA+EU,KAAAkM,cAAgB,SAACzL,GACzB,IAAI0L,EAA6B,GAiBjC,OAhBK1L,EAAQM,cACXN,EAAQM,YAAc,EAAKf,SAASe,aAEtCoL,EAAiB,cAAgB,UAAU1L,EAAQM,mBAC5CN,EAAQM,YAEY,aAAvBN,EAAQ2L,cACVD,EAAiB,gBAAkB,4CAE9B1L,EAAQ2L,YAGflN,OAAOkB,KAAKK,GAASJ,KAAI,SAAAgM,GACvBF,EAAiBE,GAAc5L,EAAQ4L,MAGlCF,GAhGPlM,KAAKD,SAAWA,EAEhBC,KAAKqM,MAAQ,YAAa,CACxBC,QAAStM,KAAKD,SAASwM,UAAUC,KACjCC,iBAAiB,EACjBjM,QAAS,CACP,eAAgB,oBAElBkM,iBAAkB,SAAAxM,GAChB,OAAO,aAAaA,EAAQ,CAAEyM,YAAa,gBAyFnD,OApFe,YAAAhM,iBAAb,SAA8BiM,EAAgBC,EAAe3M,EAAkBM,EAAwBC,G,YAA1C,IAAAP,MAAA,SAAkB,IAAAM,MAAA,SAAwB,IAAAC,MAAA,M,2pCAE/FqM,OAAG,EACDpC,EAAU1K,KAAKqM,MAAMO,GACrBG,EAAiB/M,KAAKiM,cAAczL,GAC1CC,EAASA,GAAU,0BACfmM,IAAW/M,EAAX,MAEI,GAAM6K,EAAQmC,EAAO,CACzB3M,OAAQA,EACRM,QAASuM,EACTC,YAAavM,EAAOO,S,cAHtB8L,EAAM,S,aAOA,SAAMpC,EAAQmC,EAAO3M,EAAQ,CACjCM,QAASuM,EACTC,YAAavM,EAAOO,S,OAFtB8L,EAAM,S,iBAKR,SAAOG,GAAOlM,QAAQ+L,EAAIrC,O,OAE1B,O,WAAA,GAAOwC,GAAOpB,KAAK7L,KAAKkN,aAAa,K,sTAI/B,YAAAC,cAAV,SAAwBC,GAChB,MAAkCA,EAAMC,SAAS5C,KAAxC6C,EAAY,QAAExC,EAAM,SAEnC,MAA4B,iBAAjBwC,EACa,iBAAXxC,EACFkB,GAAWuB,KAEbvB,GAAWwB,MAEbxB,GAAWyB,SAGV,YAAAP,aAAV,SAAuBE,GACrB,OAAIA,EAAMC,SAEDrN,KAAK0N,qBAAqBN,GACxBA,EAAM1C,QAER,IAAI,GAGJ,IAAI,GAAsB0C,EAAM3B,UAIjC,YAAAiC,qBAAV,SAA+BN,GACvB,MAAkCA,EAAMC,SAAS5C,KAAxC6C,EAAY,QAAExC,EAAM,SAC7B6C,EAAa3N,KAAKmN,cAAcC,GAEtC,OAAIO,IAAe3B,GAAWuB,KACrB,IAAI,GAAsBH,EAAMC,SAAUC,EAAcxC,GACtD6C,IAAe3B,GAAWwB,MAC5B,IAAI,GAAmBJ,EAAMC,SAAUC,GAEvC,IAAI,GAAcF,EAAMC,WAwBrC,EAxGA,GCTA,cACS,KAAAb,KAAO,GACP,KAAAoB,QAAU,GAmCnB,SA1BA,WAKE,WAAYpD,EAAmBqD,QAAA,IAAAA,MAAA,IAC7B7N,KAAKuM,UAAY/B,EACjBxK,KAAK6N,UAAYA,EACjB7N,KAAKU,YAAc,IAAIoN,GAAY9N,MAgBvC,OAbE,sBAAW,0BAAW,C,IAAtB,WACE,OAAIA,KAAK6N,UAAU/M,aAIfiN,OAAgB/N,KAAK6N,UAAU/M,YAAckN,aAAaC,QAAQ,UAH7DjO,KAAK6N,UAAU/M,a,IAO1B,SAAuBA,GACrBd,KAAK6N,UAAU/M,YAAcA,EACzBiN,MAAgBC,aAAaE,QAAQ,QAASpN,I,gCAEtD,EAxBA,GA+BM,SAAUiN,KACd,MAAsB,oBAAXI,O,qNCab,SAvBE,SAAY3D,GACVxK,KAAKD,SAAW,IAAI,GAAS,SACxB,IAAIqO,IACJ5D,IAELxK,KAAKqO,KAAO,IAAI,EAAKrO,KAAKD,UAC1BC,KAAKsO,QAAU,IAAI,EAAQtO,KAAKD,UAChCC,KAAKuO,KAAO,IAAI,EAAKvO,KAAKD,UAC1BC,KAAKwO,SAAW,IAAI,EAASxO,KAAKD,UAClCC,KAAKyO,YAAc,IAAI,EAAYzO,KAAKD,UACxCC,KAAK0O,MAAQ,IAAI,EAAM1O,KAAKD,UAC5BC,KAAK2O,SAAW,IAAI,EAAS3O,KAAKD,UAClCC,KAAK4O,SAAW,IAAIC,EAAS7O,KAAKD,UAClCC,KAAK8O,OAAS,IAAI,EAAO9O,KAAKD,UAC9BC,KAAK+O,MAAQ,IAAI,GAAM/O,KAAKD,UAC5BC,KAAKgP,QAAU,IAAI,GAAQhP,KAAKD,UAChCC,KAAKiP,KAAO,IAAI,GAAKjP,KAAKD,UAC1BC,KAAKkP,cAAgB,IAAI,GAAclP,KAAKD,UAC5CC,KAAKmP,QAAU,IAAI,GAAQnP,KAAKD,UAChCC,KAAKoP,OAAS,IAAI,GAAOpP,KAAKD,WChDlC,IAAMsP,GAAO,SAAC7E,GAAsB,WAAI,GAAJ,I","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const GET: string = 'get'\nexport const POST: string = 'post'\n","import { SDKScope } from './SDKScope'\n\nexport default class BaseEndpoint {\n  public readonly sdkScope: SDKScope\n\n  constructor(sdkScope: SDKScope) {\n    this.sdkScope = sdkScope\n  }\n}\n","export const Routes = {\n  login: () => `api/scope/login`,\n  logout: () => `api/scope/logout`,\n  getAccount: () => `api/scope/getAccount`,\n  createAccount: () => `api/scope/createAccount`,\n  updateAccount: () => `api/scope/updateAccount`,\n  changePassword: () => `api/scope/changePassword`,\n  impersonateAccount: (params: any) =>\n    `?slatAction=account.impersonateAccount&${Object.keys(params)\n      .map(key => key + '=' + params[key])\n      .join('&')}&apiRequest=1`,\n  endImpersonation: () => `/?slatAction=account.endFrontendImpersonation&apiRequest=1`,\n\n  //public Endpoints\n  forgotPassword: () => `api/scope/forgotPassword`,\n  resetPassowrd: () => `api/scope/resetPasswordUpdate`,\n\n  createGuestAccount: () => `api/scope/guestAccount`,\n  createGuestAccountPassword: () => `api/scope/guestAccountCreatePassword`,\n\n  verifyEmailAddress: () => `api/scope/verifyAccountEmailAddress`,\n  sendEmailVerificationLink: () => `api/scope/sendAccountEmailAddressVerificationEmail`,\n\n  //Email Address management\n  addAccountEmailAddress: () => `api/scope/addAccountEmailAddress`,\n  setPrimaryEmailAddress: () => `api/scope/setPrimaryEmailAddress`,\n  deleteAccountEmailAddress: () => `api/scope/deleteAccountEmailAddress`,\n\n  //Phone number management\n  addAccountPhoneNumber: () => `api/scope/addAccountPhoneNumber`,\n  setPrimaryAccountPhoneNumber: () => `api/scope/setPrimaryPhoneNumber`,\n  deleteAccountPhoneNumber: () => `api/scope/deleteAccountPhoneNumber`,\n\n  //Address Management\n  addAccountAddress: () => `api/scope/addNewAccountAddress`,\n  setPrimaryAccountAddress: () => `api/scope/setPrimaryAccountAddress`,\n  updateAccountAddress: () => `api/scope/updateAccountAddress`, //DEBUG, response action seems wrong\n  deleteAccountAddress: () => `api/scope/deleteAccountAddress`,\n\n  //Account Payment Methods Management\n  addAccountPaymentMethod: () => `api/scope/addAccountPaymentMethod`,\n  deleteAccountPaymentMethod: () => `api/scope/deleteAccountPaymentMethod`,\n  setPrimaryPaymentMethod: () => `api/scope/setPrimaryPaymentMethod`,\n\n  //Account Orders\n  getAccountOrders: () => `/api/scope/getAllOrdersOnAccount`,\n  getAccountQuotes: () => `/api/scope/getAllCartsAndQuotesOnAccount`,\n  getAccountOrderFulfillments: () => `/api/scope/getAllOrderFulfillmentsOnAccount`,\n  getAccountOrderDeliveries: () => `/api/scope/getAllOrderDeliveryOnAccount`,\n  getGiftCardsOnAccount: () => `/api/scope/getGiftCardsOnAccount`,\n  getSubscriptionUsage: () => `/api/scope/getSubscriptionsUsageOnAccount`,\n  getParentAccount: () => `/api/scope/getParentOnAccount/`,\n  getChildAccounts: () => `/api/scope/getChildOnAccount`,\n\n  addGiftCardToAccount: () => `/api/scope/addGiftCardToAccount`,\n  updateGiftCardStatus: () => `/api/scope/updateGiftCardStatus`,\n  getGiftCardTransactions: () => `/api/scope/getGiftCardTransactions`,\n\n  //Checkout Endpoints\n  getCart: () => `/api/scope/getCartData`,\n  addCartToSession: () => `/api/scope/addCartToSession`,\n  clearCart: () => `/api/scope/clearOrder`,\n  updateOrderNotes: () => `/api/scope/updateOrderNotes`,\n  addOrderItem: () => `/api/scope/addOrderItem`,\n  addOrderItems: () => `/api/scope/addOrderItems`,\n  updateOrderItemQuantity: () => `/api/scope/updateOrderItemQuantity`,\n  removeOrderItem: () => `/api/scope/removeOrderItem`,\n  addProductBundleToCart: () => `/api/scope/addProductBundleToCart`,\n\n  getAvailableShippingMethods: () => `/api/scope/getAvailableShippingMethods`,\n  getEligibleFulfillmentMethods: () => `/api/scope/getEligibleFulfillmentMethods`,\n  setPickupDate: () => `/api/scope/setPickupDate`,\n  clearOrderFulfillment: () => `/api/scope/clearOrderFulfillment`,\n  getAvailablePaymentMethods: () => `/api/scope/getAvailablePaymentMethods`,\n  getAppliedPromotionCodes: () => `/api/scope/getAppliedPromotionCodes`,\n  getAppliedPayments: () => `/api/scope/getAppliedPayments`,\n\n  addOrderShippingAddress: () => `/api/scope/addOrderShippingAddress`,\n  addOrderShippingAddressUsingAccountAddress: () => `/api/scope/addShippingAddressUsingAccountAddress`,\n  addOrderBillingAddressUsingAccountAddress: () => `/api/scope/addBillingAddressUsingAccountAddress`,\n  addShippingMethod: () => `/api/scope/addShippingMethodUsingShippingMethodID`,\n  addPickupLocation: () => `/api/scope/addPickupFulfillmentLocation`,\n  changeOrderFulfilment: () => `/api/scope/changeOrderFulfillment`,\n\n  addPromoCode: () => `/api/scope/addPromotionCode`,\n  removePromoCode: () => `/api/scope/removePromotionCode`,\n\n  addBillingAddress: () => `/api/scope/addBillingAddress`,\n  addNewAccountAndSetAsBillingAddress: () => `/api/scope/addNewAccountAddress,addBillingAddressUsingAccountAddress`, //new\n  addEditAccountAndSetAsBillingAddress: () => `/api/scope/addEditAccountAddress,addBillingAddressUsingAccountAddress`, //new\n  addNewAddressAndAttachAsShipping: () => `/api/scope/addNewAccountAddress,addShippingAddressUsingAccountAddress`, //new\n  addEditAddressAndAttachAsShipping: () => `/api/scope/addEditAccountAddress,addShippingAddressUsingAccountAddress`, //new\n  addOrderPayment: () => `/api/scope/addOrderPayment`,\n  addGiftCardOrderPayment: () => `/api/scope/addGiftCardOrderPayment`,\n  getPayPalClientConfigForCart: () => `/api/scope/getPayPalClientConfigForCart`,\n  createPayPalAccountPaymentMethod: () => `/api/scope/createPayPalAccountPaymentMethod`,\n\n  removeOrderPayment: () => `/api/scope/removeOrderPayment`,\n\n  placeOrder: () => `/api/scope/placeOrder`,\n\n  //Order Endpoints: TODO:\n  getOrderDetails: () => `/api/scope/getOrderDetails`,\n  duplicateOrder: () => `/api/scope/duplicateOrder`,\n  changeOrder: () => `/api/scope/changeOrder`,\n  deleteOrder: () => `/api/scope/deleteOrder`,\n\n  // Order Template Endpoints\n  createOrderTemplate: () => `api/scope/createOrderTemplate`,\n  addOrderTemplateItem: () => `api/scope/addOrderTemplateItem`,\n  addItemAndCreateWishlist: () => `api/scope/addItemAndCreateWishlist`,\n  removeOrderTemplateItem: () => `api/scope/removeOrderTemplateItem`,\n  getOrderTemplates: () => `api/scope/getOrderTemplates`,\n  addOrderTemplatePromotionCode: () => `api/scope/addOrderTemplatePromotionCode`,\n  getAppliedOrderTemplatePromotionCodes: () => `api/scope/getAppliedOrderTemplatePromotionCodes`,\n  removeOrderTemplatePromotionCode: () => `api/scope/removeOrderTemplatePromotionCode`,\n  getOrderTemplatePromotionProducts: () => `api/scope/getOrderTemplatePromotionProducts`,\n  deleteOrderTemplatePromoItems: () => `api/scope/deleteOrderTemplatePromoItems`,\n  createWishlist: () => `api/scope/createWishlist`,\n  addWishlistItem: () => `api/scope/addWishlistItem`,\n  removeWishlistItem: () => `api/scope/removeWishlistItem`,\n  getWishlists: () => `api/scope/getWishlist`,\n  shareWishlist: () => `api/scope/shareWishlist`,\n  getWishListItems: () => `api/scope/getWishListItems`,\n  addWishlistItemAndGetWishList: () => `api/scope/addWishlistItem,getWishlistItems`, //new\n  removeWishlistItemAndGetWishList: () => `api/scope/removeWishlistItem,getWishlistItems`, //new\n  getOrderTemplateItems: () => `api/scope/getOrderTemplateItems`,\n  getOrderTemplateDetails: () => `api/scope/getOrderTemplateDetails`,\n  updateOrderTemplateShipping: () => `api/scope/updateOrderTemplateShipping`,\n  updateOrderTemplateBilling: () => `api/scope/updateOrderTemplateBilling`,\n  getCancellationReasonTypeOptions: () => `api/scope/getCancellationReasonTypeOptions`,\n  getFrequencyTermOptions: () => `api/scope/getFrequencyTermOptions`,\n  getScheduleDateChangeReasonTypeOptions: () => `api/scope/getScheduleDateChangeReasonTypeOptions`,\n  editOrderTemplateItem: () => `api/scope/editOrderTemplateItem`,\n  editOrderTemplate: () => `api/scope/editOrderTemplate`,\n  updateOrderTemplateFrequency: () => `api/scope/updateOrderTemplateFrequency`,\n  cancelOrderTemplate: () => `api/scope/cancelOrderTemplate`,\n  updateOrderTemplateSchedule: () => `api/scope/updateOrderTemplateSchedule`,\n\n  //Product Endpoints\n  listProduct: () => `/api/public/product`,\n  getProduct: (id: string) => `/api/public/product/${id}`,\n  productDetailData: () => `/api/scope/productDetailData`,\n  productSkuSelected: () => `/api/scope/productSkuSelected`,\n  getSkuOptionDetails: () => `/api/scope/getSkuOptionDetails`,\n  getProductOptionsByOptionGroup: () => `/api/scope/getProductOptionsByOptionGroup`,\n  getProductFilterOptions: () => `/api/scope/getProductFilterOptions`,\n  getRelatedProducts: () => `/api/scope/getRelatedProducts`,\n  getProductReviews: () => `/api/scope/getProductReviews`,\n  getProductGallery: () => `api/scope/getProductImageGallery`,\n  getProductBundles: () => `api/scope/getProductBundles`,\n  createProductBundleBuild: () => `api/scope/createProductBundleBuild`,\n  getProductBundleBuild: () => `api/scope/getProductBundleBuild`,\n  removeProductBundleBuild: () => `api/scope/removeProductBundleBuild`,\n  productSearch: () => `/api/scope/productSearch`,\n  getResizedImageByProfileName: () => `/api/scope/getResizedImageByProfileName`,\n  addProductReview: () => `/api/scope/addProductReview`,\n\n  //Product Type Endpoints\n  listProductType: () => `/api/producttype`,\n  getProductType: (id: string) => `/api/producttype/${id}`,\n\n  //Sku Endpoints\n  listSku: () => `/api/scope/getSkuList`,\n  getSku: (id: string) => `/api/scope/getSkuList/${id}`,\n  getSkuStock: () => `/api/scope/getSkuStock`,\n\n  //Types API\n  getSystemTypesByTypeCode: () => `api/scope/getSystemTypesByTypeCode`,\n\n  //Brand APIs\n  listBrand: () => `/api/public/brand`,\n  getBrand: (id: string) => `/api/public/brand/${id}`,\n\n  //Categories APIs\n  listCategory: () => `/api/public/category`,\n  getCategory: (id: string) => `/api/public/category/${id}`,\n\n  //Options API\n  listOption: () => `/api/public/option`,\n  getOption: (id: string) => `/api/public/option/${id}`,\n\n  //Location APIs\n  listLocation: () => `/api/public/location`,\n  getLocation: (id: string) => `/api/public/location/${id}`,\n  getPickupLocations: () => `/api/scope/getPickupLocations`,\n  getCountries: () => `/api/scope/getCountries`,\n  getAddressOptions: () => `/api/scope/getAddressOptionsByCountryCode`,\n  getStates: () => `api/scope/getStateCodeOptionsByCountryCode`,\n\n  //TODO: make 2 legacy calling methods\n\n  //Content API\n  addFormResponse: () => `/api/scope/addFormResponse`,\n  getContent: () => `/api/public/content`,\n  getConfiguration: () => `/api/scope/getConfiguration`,\n  getEntity: () => `/api/public/getEntity`,\n  getContentByPage: () => `/api/scope/getContentByPage`,\n  verifyRecaptcha: () => `/api/scope/verifyRecaptcha`,\n  downloadFile: () => `/api/scope/downloadFile`,\n\n  //Quote Management Api\n  getQuotes: () => `/api/scope/getQuotes`,\n  getQuote: () => `/api/scope/getQuote`,\n  createQuote: () => `/api/scope/createQuote`,\n  convertCartToQuote: () => `/api/scope/convertCartToQuote`,\n  updateQuote: () => `/api/scope/updateQuote`,\n  submitQuoteForApproval: () => `/api/scope/submitQuoteForApproval`,\n}\n","import { POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IQuery } from '../interfaces/Query'\nimport { AuthLoginAttr, IAuthResponseResult, AuthAPIKeyAttr } from '../interfaces/Authentication'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Auth extends BaseEndpoint {\n  public async login(params: AuthLoginAttr, headers: IHeaders = {}, source: any = null): Promise<IAuthResponseResult> {\n    let result = (await this.sdkScope.httpService.slatwallResponse(POST, Routes.login(), params, headers, source)) as IAuthResponseResult\n    if (result.isSuccess()) {\n      //Set bearerToken in local Storage\n      this.sdkScope.bearerToken = result.success().token\n    } else {\n      this.sdkScope.bearerToken = null\n    }\n    return result\n  }\n\n  public async generateToken(params: AuthAPIKeyAttr, headers: IHeaders = {}, source: any = null): Promise<IAuthResponseResult> {\n    let result = (await this.sdkScope.httpService.slatwallResponse(POST, Routes.login(), params, headers, source)) as IAuthResponseResult\n    if (result.isSuccess()) {\n      //Set bearerToken in local Storage\n      this.sdkScope.bearerToken = result.success().token\n    } else {\n      this.sdkScope.bearerToken = null\n    }\n    return result\n  }\n\n  public async revokeToken(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IAuthResponseResult> {\n    this.sdkScope.bearerToken = null\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.logout(), params, headers, source)) as IAuthResponseResult\n  }\n}\n","import { GET, POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IAccountResult } from '../interfaces/Account'\nimport { IQuery } from '../interfaces/Query'\nimport { Routes } from '../routes'\nimport { IAccountCreate, IAccountUpdate, IAccountChangePassword, IAccountForgotPassword, IAccountResetPassword, IAccountCreateGuestAccount, IAccountCreateGuestAccountPassword, IAccountVerifyEmailAddress, IAccountSendEmailVerificationLink, IAccountAddEmailAddress, IAccountSetPrimaryEmailAddress, IAccountDeleteEmailAddress, IAccountAddPhoneNumber, IAccountSetPrimaryPhoneNumber, IAccountDeletePhoneNumber, IAccountAddAddress, IAccountSetPrimaryAddress, IAccountUpdateAddress, IAccountDeleteAddress, IAccountAddPaymentMethod, IAccountDeletePaymentMethod, IAccountSetPrimaryPaymentMethod, IAccountOrders, IAccountCartsAndQuotes, IAccountOrderFulfillments, IAccountOrderDeliveries, IAccountGiftCards, IAccountSubscriptionUsage, IAccountImpersonation, IGiftCardAdd, IGiftCardUpdateStatus, IGiftCardTransactions } from '../interfaces/requests/index'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Account extends BaseEndpoint {\n  public async get(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAccount(), params, headers, source)) as IAccountResult\n  }\n\n  public async create(params: IAccountCreate, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.createAccount(), params, headers, source)) as IAccountResult\n  }\n\n  public async update(params: IAccountUpdate, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.updateAccount(), params, headers, source)) as IAccountResult\n  }\n\n  public async changePassword(params: IAccountChangePassword, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.changePassword(), params, headers, source)) as IAccountResult\n  }\n\n  public async forgotPassword(params: IAccountForgotPassword, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.forgotPassword(), params, headers, source)) as IAccountResult\n  }\n\n  public async resetPassword(params: IAccountResetPassword, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.resetPassowrd(), params, headers, source)) as IAccountResult\n  }\n\n  public async createGuestAccount(params: IAccountCreateGuestAccount, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.createGuestAccount(), params, headers, source)) as IAccountResult\n  }\n\n  public async createGuestAccountPassword(params: IAccountCreateGuestAccountPassword, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.createGuestAccountPassword(), params, headers, source)) as IAccountResult\n  }\n\n  public async verifyEmailAddress(params: IAccountVerifyEmailAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.verifyEmailAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async sendEmailVerificationLink(params: IAccountSendEmailVerificationLink, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.sendEmailVerificationLink(), params, headers, source)) as IAccountResult\n  }\n\n  public async addEmailAddress(params: IAccountAddEmailAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addAccountEmailAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async setPrimaryEmailAddress(params: IAccountSetPrimaryEmailAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.setPrimaryEmailAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async deleteEmailAddress(params: IAccountDeleteEmailAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.deleteAccountEmailAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async addPhoneNumber(params: IAccountAddPhoneNumber, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addAccountPhoneNumber(), params, headers, source)) as IAccountResult\n  }\n\n  public async setPrimaryPhoneNumber(params: IAccountSetPrimaryPhoneNumber, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.setPrimaryAccountPhoneNumber(), params, headers, source)) as IAccountResult\n  }\n\n  public async deletePhoneNumber(params: IAccountDeletePhoneNumber, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.deleteAccountPhoneNumber(), params, headers, source)) as IAccountResult\n  }\n\n  public async addAddress(params: IAccountAddAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addAccountAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async setPrimaryAddress(params: IAccountSetPrimaryAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.setPrimaryAccountAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async updateAddress(params: IAccountUpdateAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.updateAccountAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async deleteAddress(params: IAccountDeleteAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.deleteAccountAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async addPaymentMethod(params: IAccountAddPaymentMethod, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addAccountPaymentMethod(), params, headers, source)) as IAccountResult\n  }\n\n  public async deletePaymentMethod(params: IAccountDeletePaymentMethod, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.deleteAccountPaymentMethod(), params, headers, source)) as IAccountResult\n  }\n\n  public async sePrimaryPaymentMethod(params: IAccountSetPrimaryPaymentMethod, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.setPrimaryPaymentMethod(), params, headers, source)) as IAccountResult\n  }\n\n  public async orders(params: IAccountOrders, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getAccountOrders(), params, headers, source)) as IAccountResult\n  }\n\n  public async cartsAndQuotes(params: IAccountCartsAndQuotes, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getAccountQuotes(), params, headers, source)) as IAccountResult\n  }\n\n  public async orderFulfillments(params: IAccountOrderFulfillments, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getAccountOrderFulfillments(), params, headers, source)) as IAccountResult\n  }\n\n  public async orderDeliveries(params: IAccountOrderDeliveries, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getAccountOrderDeliveries(), params, headers, source)) as IAccountResult\n  }\n\n  public async giftCards(params: IAccountGiftCards, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getGiftCardsOnAccount(), params, headers, source)) as IAccountResult\n  }\n\n  public async addGiftCard(params: IGiftCardAdd, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addGiftCardToAccount(), params, headers, source)) as IAccountResult\n  }\n\n  public async updateGiftCardStatus(params: IGiftCardUpdateStatus, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.updateGiftCardStatus(), params, headers, source)) as IAccountResult\n  }\n\n  public async getGiftCardTransactions(params: IGiftCardTransactions, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getGiftCardTransactions(), params, headers, source)) as IAccountResult\n  }\n\n  public async subscriptionUsage(params: IAccountSubscriptionUsage, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getSubscriptionUsage(), params, headers, source)) as IAccountResult\n  }\n\n  public async parentAccount(headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getParentAccount(), {}, headers, source)) as IAccountResult\n  }\n\n  public async childAccounts(headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getChildAccounts(), {}, headers, source)) as IAccountResult\n  }\n\n  public async impersonateAccount(params: IAccountImpersonation, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.impersonateAccount(params), {}, headers, source)) as IAccountResult\n  }\n\n  public async endImpersonation(headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.endImpersonation(), {}, headers, source)) as IAccountResult\n  }\n}\n","import { GET, POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IOrderResult } from '../interfaces/Order'\nimport { IQuery } from '../interfaces/Query'\nimport { Routes } from '../routes'\nimport { ICartClear, ICartUpdateNotes, ICartAddItem, ICartAddItems, ICartUpdateItemQuantity, ICartRemoveItem, ICartAddProductBundleBuild, ICartAvailableShippingMethods, ICartAddShippingAddress, ICartAddShippingAddressUsingAccountAddress, ICartAddBillingAddressUsingAccountAddress, ICartAddShippingMethod, ICartAddPickupLocation, ICartUpdateFulfillment, ICartSetPickupDate, ICartClearOrderFulfillment, ICartApplyPromoCode, ICartRemovePromoCode, ICartAddBillingAddress, ICartAddPayment, ICartRemovePayment, ICartPlaceOrder } from '../interfaces/requests/index'\nimport { IHeaders } from '../SDKScope'\n\n/* Note these should be kept in pairity with Quotes */\nexport default class Cart extends BaseEndpoint {\n  public async get(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getCart(), params, headers, source)) as IOrderResult\n  }\n\n  public async updateNotes(params: ICartUpdateNotes, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.updateOrderNotes(), params, headers, source)) as IOrderResult\n  }\n\n  public async addItem(params: ICartAddItem, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderItem(), params, headers, source)) as IOrderResult\n  }\n\n  public async addItems(params: ICartAddItems, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderItems(), params, headers, source)) as IOrderResult\n  }\n\n  public async updateItemQuantity(params: ICartUpdateItemQuantity, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.updateOrderItemQuantity(), params, headers, source)) as IOrderResult\n  }\n\n  public async removeItem(params: ICartRemoveItem, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.removeOrderItem(), params, headers, source)) as IOrderResult\n  }\n\n  public async availableShippingMethods(params: ICartAvailableShippingMethods, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAvailableShippingMethods(), params, headers, source)) as IOrderResult\n  }\n\n  public async eligibleFulfillmentMethods(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getEligibleFulfillmentMethods(), params, headers, source)) as IOrderResult\n  }\n\n  public async availablePaymentMethods(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAvailablePaymentMethods(), params, headers, source)) as IOrderResult\n  }\n\n  public async setPickupDate(params: ICartSetPickupDate, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.setPickupDate(), params, headers, source)) as IOrderResult\n  }\n\n  public async clearOrderFulfillment(params: ICartClearOrderFulfillment, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.clearOrderFulfillment(), params, headers, source)) as IOrderResult\n  }\n\n  public async addShippingAddress(params: ICartAddShippingAddress, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderShippingAddress(), params, headers, source)) as IOrderResult\n  }\n\n  public async addShippingAddressUsingAccountAddress(params: ICartAddShippingAddressUsingAccountAddress, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderShippingAddressUsingAccountAddress(), params, headers, source)) as IOrderResult\n  }\n\n  public async addBillingAddressUsingAccountAddress(params: ICartAddBillingAddressUsingAccountAddress, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderBillingAddressUsingAccountAddress(), params, headers, source)) as IOrderResult\n  }\n\n  public async addShippingMethod(params: ICartAddShippingMethod, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addShippingMethod(), params, headers, source)) as IOrderResult\n  }\n\n  public async addPickupLocation(params: ICartAddPickupLocation, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addPickupLocation(), params, headers, source)) as IOrderResult\n  }\n\n  public async updateFulfillment(params: ICartUpdateFulfillment, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.changeOrderFulfilment(), params, headers, source)) as IOrderResult\n  }\n\n  public async applyPromoCode(params: ICartApplyPromoCode, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addPromoCode(), params, headers, source)) as IOrderResult\n  }\n\n  public async removePromoCode(params: ICartRemovePromoCode, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.removePromoCode(), params, headers, source)) as IOrderResult\n  }\n\n  public async addBillingAddress(params: ICartAddBillingAddress, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addBillingAddress(), params, headers, source)) as IOrderResult\n  }\n\n  public async addNewAccountAndSetAsBillingAddress(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addNewAccountAndSetAsBillingAddress(), params, headers, source)) as IOrderResult\n  }\n\n  public async addEditAccountAndSetAsBillingAddress(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addEditAccountAndSetAsBillingAddress(), params, headers, source)) as IOrderResult\n  }\n\n  public async addNewAddressAndAttachAsShipping(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addNewAddressAndAttachAsShipping(), params, headers, source)) as IOrderResult\n  }\n\n  public async addEditAddressAndAttachAsShipping(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addEditAddressAndAttachAsShipping(), params, headers, source)) as IOrderResult\n  }\n\n  public async addPayment(params: ICartAddPayment, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderPayment(), params, headers, source)) as IOrderResult\n  }\n\n  public async removePayment(params: ICartRemovePayment, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.removeOrderPayment(), params, headers, source)) as IOrderResult\n  }\n\n  public async placeOrder(params: ICartPlaceOrder, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.placeOrder(), params, headers, source)) as IOrderResult\n  }\n\n  public async clear(params: ICartClear, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.clearCart(), params, headers, source)) as IOrderResult\n  }\n\n  public async delete(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.deleteOrder(), params, headers, source)) as IOrderResult\n  }\n\n  /* Start Cart specific Functions */\n  public async addCartToSession(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addCartToSession(), params, headers, source)) as IOrderResult\n  }\n\n  public async getPayPalClientConfigForCart(headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getPayPalClientConfigForCart(), {}, headers, source)) as IOrderResult\n  }\n\n  public async createPayPalAccountPaymentMethod(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.createPayPalAccountPaymentMethod(), params, headers, source)) as IOrderResult\n  }\n\n  public async addProductBundleBuild(params: ICartAddProductBundleBuild, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addProductBundleToCart(), params, headers, source)) as IOrderResult\n  }\n\n  public async appliedPromotionCodes(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAppliedPromotionCodes(), params, headers, source)) as IOrderResult\n  }\n\n  public async appliedPayments(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAppliedPayments(), params, headers, source)) as IOrderResult\n  }\n\n  public async addGiftCardPayment(params: ICartAddPayment, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addGiftCardOrderPayment(), params, headers, source)) as IOrderResult\n  }\n}\n","import { IQuery } from '../interfaces/Query'\n\nexport const parseParams = (params: IQuery = {}) => {\n  let parsedResult = {}\n\n  if (params.perPage) {\n    parsedResult['p:show'] = params.perPage\n  }\n\n  if (params.page) {\n    parsedResult['p:current'] = params.page\n  }\n\n  if (params.sort && params.sortOrder) {\n    parsedResult['orderBy'] = params.sort + '|' + params.sortOrder\n  }\n\n  if (params.filter) {\n    for (let key of Object.keys(params.filter)) {\n      if (key != '' && params.filter[key] !== '') {\n        parsedResult['f:' + key] = params.filter[key]\n      }\n    }\n  }\n  return parsedResult\n}\n\nexport const parsePublicParams = (params: IQuery = {}) => {\n  let parsedResult = {}\n\n  if (params.perPage) {\n    parsedResult['pageRecordsShow'] = params.perPage\n  }\n\n  if (params.page) {\n    parsedResult['currentPage'] = params.page\n  }\n\n  if (params.filter) {\n    for (let key of Object.keys(params.filter)) {\n      if (key != '' && params.filter[key] !== '') {\n        parsedResult[key] = params.filter[key]\n      }\n    }\n  }\n  return parsedResult\n}\n","import BaseEndpoint from '../BaseEndpoint'\nimport { GET, POST } from '../constants'\nimport { parseParams } from '../helpers/parseParams'\nimport { IProductResult, IProductsResult } from '../interfaces/Product'\nimport { IProductFilterOptionsResult } from '../interfaces/ProductFilterOption'\nimport { IProductOptionGroupResult } from '../interfaces/ProductOptionGroup'\nimport { IQuery, productOptionGroup } from '../interfaces/Query'\nimport { IProductsGetFilterOptions, IProductsGetGallery, IProductsGetImagePaths, IProductsGetDetails, IProductsGetOptionsByOptionGroup, IProductsGetRelatedProducts, IProductsGetReviews, IProductsGetStock, IProductsGetBundles, IProductsCreateBundleBuild, IProductsGetBundleBuild, IProductsRemoveBundleBuild, IProductsAddReview } from '../interfaces/requests/index'\nimport { ISkuResult } from '../interfaces/Sku'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Products extends BaseEndpoint {\n  public async list(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.listProduct(), parseParams(params), headers, source)) as IProductsResult\n  }\n\n  public async get(id: string, headers: IHeaders = {}, source: any = null): Promise<IProductResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getProduct(id), headers, source)) as IProductResult\n  }\n\n  public async getDetails(params: IProductsGetDetails, headers: IHeaders = {}, source: any = null): Promise<IProductResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.productDetailData(), params, headers, source)) as IProductResult\n  }\n\n  public async getSkuSelected(params: IProductsGetDetails, headers: IHeaders = {}, source: any = null): Promise<IProductResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.productSkuSelected(), params, headers, source)) as IProductResult\n  }\n\n  public async getSkuOptionDetails(params: IProductsGetDetails, headers: IHeaders = {}, source: any = null): Promise<IProductResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getSkuOptionDetails(), params, headers, source)) as IProductResult\n  }\n\n  public async search(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.productSearch(), params, headers, source)) as IProductsResult\n  }\n\n  public async getGallery(params: IProductsGetGallery, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getProductGallery(), params, headers, source)) as IProductsResult\n  }\n\n  public async getImagePaths(params: IProductsGetImagePaths, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getResizedImageByProfileName(), params, headers, source)) as IProductsResult\n  }\n\n  public async getOptionsByOptionGroup(params: IProductsGetOptionsByOptionGroup, headers: IHeaders = {}, source: any = null): Promise<IProductOptionGroupResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getProductOptionsByOptionGroup(), params, headers, source)) as IProductOptionGroupResult\n  }\n\n  public async getFilterOptions(params: IProductsGetFilterOptions, headers: IHeaders = {}, source: any = null): Promise<IProductFilterOptionsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getProductFilterOptions(), params, headers, source)) as IProductFilterOptionsResult\n  }\n\n  public async listSku(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.listSku(), parseParams(params), headers, source)) as IProductsResult\n  }\n\n  public async getSku(id: string, headers: IHeaders = {}, source: any = null): Promise<ISkuResult> {\n    const res = await this.sdkScope.httpService.slatwallResponse(GET, Routes.getSku(id), {}, headers, source)\n    return res as ISkuResult\n  }\n\n  public async getRelatedProducts(params: IProductsGetRelatedProducts, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getRelatedProducts(), params, headers, source)) as IProductsResult\n  }\n\n  public async getReviews(params: IProductsGetReviews, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getProductReviews(), params, headers, source)) as IProductsResult\n  }\n\n  public async getStock(params: IProductsGetStock, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getSkuStock(), params, headers, source)) as IProductsResult\n  }\n\n  public async getBundles(params: IProductsGetBundles, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getProductBundles(), params, headers, source)) as IProductsResult\n  }\n\n  public async createBundleBuild(params: IProductsCreateBundleBuild, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.createProductBundleBuild(), params, headers, source)) as IProductsResult\n  }\n\n  public async getBundleBuild(params: IProductsGetBundleBuild, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getProductBundleBuild(), params, headers, source)) as IProductsResult\n  }\n\n  public async removeBundleBuild(params: IProductsRemoveBundleBuild, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.removeProductBundleBuild(), params, headers, source)) as IProductsResult\n  }\n  \n  public async addProductReview(params: IProductsAddReview, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addProductReview(), params, headers, source)) as IProductsResult\n  }\n}\n","import { GET } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IProductTypeResult, IProductTypesResult } from '../interfaces/ProductType'\nimport { IQuery } from '../interfaces/Query'\nimport { parseParams } from '../helpers/parseParams'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\n\nexport default class ProductType extends BaseEndpoint {\n  public async list(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IProductTypesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.listProductType(), parseParams(params), headers, source)) as IProductTypesResult\n  }\n\n  public async get(id: string, headers: IHeaders = {}, source: any = null): Promise<IProductTypeResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getProductType(id), {}, headers, source)) as IProductTypeResult\n  }\n}\n","import { GET } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IBrandResult, IBrandsResult } from '../interfaces/Brand'\nimport { IQuery } from '../interfaces/Query'\nimport { parseParams } from '../helpers/parseParams'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Brand extends BaseEndpoint {\n  public async list(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IBrandsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.listBrand(), parseParams(params), headers, source)) as IBrandsResult\n  }\n\n  public async get(id: string, headers: IHeaders = {}, source: any = null): Promise<IBrandResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getBrand(id), {}, headers, source)) as IBrandResult\n  }\n}\n","import { GET } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { ICategoryResult, ICategoriesResult } from '../interfaces/Category'\nimport { IQuery } from '../interfaces/Query'\nimport { parseParams } from '../helpers/parseParams'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Category extends BaseEndpoint {\n  public async list(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<ICategoriesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.listCategory(), parseParams(params), headers, source)) as ICategoriesResult\n  }\n\n  public async get(id: string, headers: IHeaders = {}, source: any = null): Promise<ICategoryResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getCategory(id), {}, headers, source)) as ICategoryResult\n  }\n}\n","import { GET } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IOptionResult, IOptionsResult } from '../interfaces/Option'\nimport { IQuery } from '../interfaces/Query'\nimport { parseParams } from '../helpers/parseParams'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Option extends BaseEndpoint {\n  public async list(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IOptionsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.listOption(), parseParams(params), headers, source)) as IOptionsResult\n  }\n\n  public async get(id: string, headers: IHeaders = {}, source: any = null): Promise<IOptionResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getOption(id), {}, headers, source)) as IOptionResult\n  }\n}\n","import { GET } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { ILocationResult, ILocationsResult } from '../interfaces/Location'\nimport { IQuery } from '../interfaces/Query'\nimport { parseParams } from '../helpers/parseParams'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Option extends BaseEndpoint {\n  public async list(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<ILocationsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.listLocation(), parseParams(params), headers, source)) as ILocationsResult\n  }\n\n  public async get(id: string, headers: IHeaders = {}, source: any = null): Promise<ILocationResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getLocation(id), {}, headers, source)) as ILocationResult\n  }\n\n  public async getPickupLocations(headers: IHeaders = {}, source: any = null): Promise<ILocationsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getPickupLocations(), {}, headers, source)) as ILocationsResult\n  }\n\n  public async countries(headers: IHeaders = {}, source: any = null): Promise<ILocationsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getCountries(), {}, headers, source)) as ILocationsResult\n  }\n\n  public async states(params: { countryCode: string }, headers: IHeaders = {}, source: any = null): Promise<ILocationsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getStates(), params, headers, source)) as ILocationsResult\n  }\n\n  public async addressOptions(params: {}, headers: IHeaders = {}, source: any = null): Promise<ILocationsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAddressOptions(), params, headers, source)) as ILocationsResult\n  }\n}\n","import { POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IOrderResult } from '../interfaces/Order'\nimport { IQuery } from '../interfaces/Query'\nimport { parseParams } from '../helpers/parseParams'\nimport { Routes } from '../routes'\nimport { IOrderDuplicate, IOrderDelete, IOrderSetOrderOnCart } from '../interfaces/requests/index'\nimport { IHeaders } from '../SDKScope'\nexport default class Order extends BaseEndpoint {\n  public async get(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getOrderDetails(), params, headers, source)) as IOrderResult\n  }\n\n  public async duplicate(params: IOrderDuplicate, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.duplicateOrder(), params, headers, source)) as IOrderResult\n  }\n\n  public async delete(params: IOrderDelete, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.deleteOrder(), params, headers, source)) as IOrderResult\n  }\n\n  public async setOrderOnCart(params: IOrderSetOrderOnCart, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.changeOrder(), params, headers, source)) as IOrderResult\n  }\n}\n","import { GET, POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IContentResult } from '../interfaces/Content'\nimport { IQuery } from '../interfaces/Query'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\nimport { IContentData, IContentGetConfiguration, IContentByPage, IVerifyRecaptcha, IDownloadFile } from '../interfaces/requests/index'\n\nexport default class Content extends BaseEndpoint {\n  public async get(params: IContentData, headers: IHeaders = {}, source: any = null): Promise<IContentResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getContent(), params, headers, source)) as IContentResult\n  }\n\n  public async getConfiguration(params: IContentGetConfiguration, headers: IHeaders = {}, source: any = null): Promise<IContentResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getConfiguration(), params, headers, source)) as IContentResult\n  }\n\n  public async addFormResponse(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IContentResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addFormResponse(), params, headers, source)) as IContentResult\n  }\n\n  public async getContentByPage(params: IContentByPage, headers: IHeaders = {}, source: any = null): Promise<IContentResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getContentByPage(), params, headers, source)) as IContentResult\n  }\n\n  public async verifyRecaptcha(params: IVerifyRecaptcha, headers: IHeaders = {}, source: any = null): Promise<IContentResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.verifyRecaptcha(), params, headers, source)) as IContentResult\n  }\n\n  public async downloadFile(params: IDownloadFile, headers: IHeaders = {}, source: any = null): Promise<IContentResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.downloadFile(), params, headers, source)) as IContentResult\n  }\n}\n","import { GET, POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { Routes } from '../routes'\nimport { IQuery, productOptionGroup } from '../interfaces/Query'\n\nimport { ITypeResult, ITypesResult } from '../interfaces/Type'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Type extends BaseEndpoint {\n  public async getTypesByTypeCode(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<ITypesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getSystemTypesByTypeCode(), params, headers, source)) as ITypesResult\n  }\n}\n","import { GET, POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { Routes } from '../routes'\nimport { IQuery } from '../interfaces/Query'\nimport { IOrderTemplateResult, IOrderTemplatesResult, IOrderTemplateResponseResult } from '../interfaces/OrderTemplate'\n\nimport { IWishListShare, IWishListRemoveItem, IOrderTemplateCreate, IOrderTemplateCreateAndAddItem, IOrderTemplateGet, IOrderTemplateList, IOrderTemplateAddItem, IOrderTemplateRemoveItem, IOrderTemplateAddPromotionCode, IOrderTemplateRemovePromotionCode, IOrderTemplateGetAppliedPromotionCode, IOrderTemplateItemEdit, IOrderTemplateEdit, IOrderTemplateEditFrequency, IOrderTemplateEditSchedule, IOrderTemplateCancelOrderTemplate, IOrderTemplateUpdateShipping, IOrderTemplateUpdateBilling } from '../interfaces/requests/OrderTemplate'\nimport { IHeaders } from '../SDKScope'\n\nexport default class OrderTemplate extends BaseEndpoint {\n  public async create(params: IOrderTemplateCreate, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.createOrderTemplate(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async addItem(params: IOrderTemplateAddItem, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.addOrderTemplateItem(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async createAndAddItem(params: IOrderTemplateCreateAndAddItem, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.addItemAndCreateWishlist(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async removeItem(params: IOrderTemplateRemoveItem, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.removeOrderTemplateItem(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async addPromotionCode(params: IOrderTemplateAddPromotionCode, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.addOrderTemplatePromotionCode(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async removePromotionCode(params: IOrderTemplateRemovePromotionCode, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.removeOrderTemplatePromotionCode(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async getAppliedPromotionCodes(params: IOrderTemplateGet, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAppliedOrderTemplatePromotionCodes(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async getPromotionProducts(params: IOrderTemplateGetAppliedPromotionCode, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getOrderTemplatePromotionProducts(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async removePromotionItems(params: IOrderTemplateGetAppliedPromotionCode, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.deleteOrderTemplatePromoItems(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async list(params: IOrderTemplateList, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplatesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getOrderTemplates(), params, headers, source)) as IOrderTemplatesResult\n  }\n\n  public async createWishlist(params: IOrderTemplateCreate, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.createWishlist(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async addWishlistItem(params: IOrderTemplateAddItem, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.addWishlistItem(), params, headers, source)) as IOrderTemplateResult\n  }\n  public async addWishlistItemAndGetWishList(params: IOrderTemplateAddItem, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addWishlistItemAndGetWishList(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async removeWishlistItem(params: IWishListRemoveItem, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.removeWishlistItem(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async removeWishlistItemAndGetWishList(params: IWishListRemoveItem, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.removeWishlistItemAndGetWishList(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async shareWishlist(params: IWishListShare, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.shareWishlist(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async getWishlists(headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getWishlists(), {}, headers, source)) as IOrderTemplateResult\n  }\n\n  public async getWishListItems(headers: IHeaders = {}, source: any = null): Promise<IOrderTemplatesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getWishListItems(), {}, headers, source)) as IOrderTemplatesResult\n  }\n  \n  public async getOrderTemplateItems(params: IOrderTemplateGet, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getOrderTemplateItems(), params, headers, source)) as IOrderTemplateResult\n  }\n  \n  public async getOrderTemplateDetails(params: IOrderTemplateGet, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getOrderTemplateDetails(), params, headers, source)) as IOrderTemplateResult\n  }\n  \n  public async updateOrderTemplateShipping(params: IOrderTemplateUpdateShipping, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.updateOrderTemplateShipping(), params, headers, source)) as IOrderTemplateResult\n  }\n  \n  public async updateOrderTemplateBilling(params: IOrderTemplateUpdateShipping, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.updateOrderTemplateBilling(), params, headers, source)) as IOrderTemplateResult\n  }\n  \n  public async getCancellationReasonTypeOptions(headers: IHeaders = {}, source: any = null): Promise<IOrderTemplatesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getCancellationReasonTypeOptions(), {}, headers, source)) as IOrderTemplatesResult\n  }\n  \n  public async getFrequencyTermOptions(headers: IHeaders = {}, source: any = null): Promise<IOrderTemplatesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getFrequencyTermOptions(), {}, headers, source)) as IOrderTemplatesResult\n  }\n  \n  public async getScheduleDateChangeReasonTypeOptions(headers: IHeaders = {}, source: any = null): Promise<IOrderTemplatesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getScheduleDateChangeReasonTypeOptions(), {}, headers, source)) as IOrderTemplatesResult\n  }\n  \n  public async editOrderTemplateItem(params: IOrderTemplateItemEdit, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.editOrderTemplateItem(), params, headers, source)) as IOrderTemplateResult\n  }\n  \n  public async editOrderTemplate(params: IOrderTemplateEdit, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResponseResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.editOrderTemplate(), params, headers, source)) as IOrderTemplateResponseResult\n  }\n  \n  public async updateOrderTemplateFrequency(params: IOrderTemplateEditFrequency, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.updateOrderTemplateFrequency(), params, headers, source)) as IOrderTemplateResult\n  }\n  \n  public async updateOrderTemplateSchedule(params: IOrderTemplateEditSchedule, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.updateOrderTemplateSchedule(), params, headers, source)) as IOrderTemplateResult\n  }\n  \n  public async cancelOrderTemplate(params: IOrderTemplateCancelOrderTemplate, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.cancelOrderTemplate(), params, headers, source)) as IOrderTemplateResult\n  }\n}\n","import { GET, POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { Routes } from '../routes'\nimport { IQuery } from '../interfaces/Query'\n\nimport { ITypesResult } from '../interfaces/Type'\nimport { IHeaders } from '../SDKScope'\n\nexport default class General extends BaseEndpoint {\n  public async getEntity(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<ITypesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getEntity(), params, headers, source)) as ITypesResult\n  }\n}\n","import { GET, POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IQuotesResult } from '../interfaces/Quote'\nimport { IQuery } from '../interfaces/Query'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\nimport { IGetQuote, ICreateQuote, IAddQuoteItem, IUpdateQuoteItemQuantity, IQuoteShippingAddress, IQuoteSubmitForApproval, IQuoteSetPickupDate, IQuoteClearOrderFulfillment, IQuoteNotes, IQuoteAddShippingAddressUsingAccountAddress, IQuoteAddBillingAddressUsingAccountAddress, IQuoteAddShippingMethod, IQuoteAddPayment, IQuoteRemovePayment, IQuotePlaceOrder, IQuoteAddBillingAddress, IQuoteRemovePromoCode, IQuoteApplyPromoCode, IQuoteUpdateFulfillment, IQuoteAddPickupLocation, IRemoveQuoteItem, IQuoteUpdate } from '../interfaces/requests/Quote'\n\n/* Note these should be kept in pairity with Cart */\nexport default class Quotes extends BaseEndpoint {\n  public async get(params: IGetQuote, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getQuote(), params, headers, source)) as IQuotesResult\n  }\n\n  public async updateNotes(params: IQuoteNotes, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.updateOrderNotes(), params, headers, source)) as IQuotesResult\n  }\n\n  public async addItem(params: IAddQuoteItem, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderItem(), params, headers, source)) as IQuotesResult\n  }\n\n  public async addItems(params: IAddQuoteItem, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderItems(), params, headers, source)) as IQuotesResult\n  }\n\n  public async updateItemQuantity(params: IUpdateQuoteItemQuantity, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.updateOrderItemQuantity(), params, headers, source)) as IQuotesResult\n  }\n\n  public async removeItem(params: IRemoveQuoteItem, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.removeOrderItem(), params, headers, source)) as IQuotesResult\n  }\n\n  public async availableShippingMethods(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAvailableShippingMethods(), params, headers, source)) as IQuotesResult\n  }\n\n  public async eligibleFulfillmentMethods(params: IGetQuote, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getEligibleFulfillmentMethods(), params, headers, source)) as IQuotesResult\n  }\n\n  public async availablePaymentMethods(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAvailablePaymentMethods(), params, headers, source)) as IQuotesResult\n  }\n\n  public async setPickupDate(params: IQuoteSetPickupDate, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.setPickupDate(), params, headers, source)) as IQuotesResult\n  }\n\n  public async clearOrderFulfillment(params: IQuoteClearOrderFulfillment, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.clearOrderFulfillment(), params, headers, source)) as IQuotesResult\n  }\n\n  public async addShippingAddress(params: IQuoteShippingAddress, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderShippingAddress(), params, headers, source)) as IQuotesResult\n  }\n\n  public async addShippingAddressUsingAccountAddress(params: IQuoteAddShippingAddressUsingAccountAddress, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderShippingAddressUsingAccountAddress(), params, headers, source)) as IQuotesResult\n  }\n\n  public async addBillingAddressUsingAccountAddress(params: IQuoteAddBillingAddressUsingAccountAddress, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderBillingAddressUsingAccountAddress(), params, headers, source)) as IQuotesResult\n  }\n\n  public async addShippingMethod(params: IQuoteAddShippingMethod, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addShippingMethod(), params, headers, source)) as IQuotesResult\n  }\n\n  public async addPickupLocation(params: IQuoteAddPickupLocation, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addPickupLocation(), params, headers, source)) as IQuotesResult\n  }\n\n  public async updateFulfillment(params: IQuoteUpdateFulfillment, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.changeOrderFulfilment(), params, headers, source)) as IQuotesResult\n  }\n\n  public async applyPromoCode(params: IQuoteApplyPromoCode, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addPromoCode(), params, headers, source)) as IQuotesResult\n  }\n\n  public async removePromoCode(params: IQuoteRemovePromoCode, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.removePromoCode(), params, headers, source)) as IQuotesResult\n  }\n\n  public async addBillingAddress(params: IQuoteAddBillingAddress, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addBillingAddress(), params, headers, source)) as IQuotesResult\n  }\n\n  public async addNewAccountAndSetAsBillingAddress(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addNewAccountAndSetAsBillingAddress(), params, headers, source)) as IQuotesResult\n  }\n\n  public async addEditAccountAndSetAsBillingAddress(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addEditAccountAndSetAsBillingAddress(), params, headers, source)) as IQuotesResult\n  }\n\n  public async addNewAddressAndAttachAsShipping(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addNewAddressAndAttachAsShipping(), params, headers, source)) as IQuotesResult\n  }\n\n  public async addEditAddressAndAttachAsShipping(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addEditAddressAndAttachAsShipping(), params, headers, source)) as IQuotesResult\n  }\n\n  public async addPayment(params: IQuoteAddPayment, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderPayment(), params, headers, source)) as IQuotesResult\n  }\n\n  public async removePayment(params: IQuoteRemovePayment, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.removeOrderPayment(), params, headers, source)) as IQuotesResult\n  }\n\n  public async placeOrder(params: IQuotePlaceOrder, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.placeOrder(), params, headers, source)) as IQuotesResult\n  }\n\n  public async clear(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.clearCart(), params, headers, source)) as IQuotesResult\n  }\n\n  public async delete(params: IGetQuote, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.deleteOrder(), params, headers, source)) as IQuotesResult\n  }\n\n  /* Start Quote specific Functions */\n  public async list(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getQuotes(), params, headers, source)) as IQuotesResult\n  }\n\n  public async createQuote(params: ICreateQuote, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.createQuote(), params, headers, source)) as IQuotesResult\n  }\n\n  public async updateQuote(params: IQuoteUpdate, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.updateQuote(), params, headers, source)) as IQuotesResult\n  }\n\n  public async convertCartToQuote(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.convertCartToQuote(), params, headers, source)) as IQuotesResult\n  }\n\n  public async submitQuoteForApproval(params: IQuoteSubmitForApproval, headers: IHeaders = {}, source: any = null): Promise<IQuotesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.submitQuoteForApproval(), params, headers, source)) as IQuotesResult\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"axios\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"qs\");","export default class SlatwallSDKError extends Error {\n  constructor(name: string) {\n    super(name)\n    ;(Object as any).setPrototypeOf(this, SlatwallSDKError.prototype)\n  }\n}\n","import { AxiosResponse } from 'axios'\nimport SlatwallSDKError from './SlatwallSDKError'\n\nexport default class SlatwallError extends SlatwallSDKError {\n  public serverResponse: AxiosResponse\n\n  constructor(serverResponse: AxiosResponse) {\n    super(`Slatwall returned a HTTP ${serverResponse.status} error code`)\n    ;(Object as any).setPrototypeOf(this, SlatwallError.prototype)\n    this.name = 'SpreeError'\n    const reducedServerResponse = { ...serverResponse }\n    // Reduce logging by removing the 'enumerable' flag on some keys in AxiosResponse.\n    Object.defineProperties(reducedServerResponse, {\n      config: { enumerable: false },\n      data: { enumerable: false },\n      headers: { enumerable: false },\n      request: { enumerable: false },\n    })\n    this.serverResponse = reducedServerResponse\n  }\n}\n","import { AxiosResponse } from 'axios'\nimport SlatwallError from './SlatwallError'\n\nclass BasicSlatwallError extends SlatwallError {\n  public summary: string\n\n  constructor(serverResponse: AxiosResponse, errorsSummary: string) {\n    super(serverResponse)\n    ;(Object as any).setPrototypeOf(this, BasicSlatwallError.prototype)\n    this.name = 'BasicSlatwallError'\n    this.summary = errorsSummary\n  }\n}\n\nexport default BasicSlatwallError\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash/get\");","import { AxiosResponse } from 'axios'\nimport get from 'lodash/get'\nimport BasicSlatwallError from './BasicSlatwallError'\n\nexport default class ExpandedSlatwallError extends BasicSlatwallError {\n  public errors: any\n\n  constructor(serverResponse: AxiosResponse, errorsSummary: string, errors: any) {\n    super(serverResponse, errorsSummary)\n    ;(Object as any).setPrototypeOf(this, ExpandedSlatwallError.prototype)\n    this.name = 'ExpandedSlatwallError'\n    this.errors = Object.keys(errors).reduce((acc, field) => {\n      const keys = field.split('.')\n      let key = keys.shift()\n      let node = acc\n      while (key) {\n        if (!node[key]) {\n          if (keys.length === 0) {\n            node[key] = errors[field]\n          } else {\n            node[key] = {}\n          }\n        }\n        node = node[key]\n        key = keys.shift()\n      }\n      return acc\n    }, {})\n  }\n\n  public getErrors(path: string[]): string[] | null {\n    return get(this.errors, path, null)\n  }\n}\n","import SlatwallSDKError from './SlatwallSDKError'\n\nexport default class MisconfigurationError extends SlatwallSDKError {\n  constructor(message: string) {\n    super(`Incorrect request setup: ${message}`)\n    ;(Object as any).setPrototypeOf(this, MisconfigurationError.prototype)\n    this.name = 'MisconfigurationError'\n  }\n}\n","import SlatwallSDKError from './SlatwallSDKError'\n\nexport default class NoResponseError extends SlatwallSDKError {\n  constructor() {\n    super('No response received from Spree')\n    ;(Object as any).setPrototypeOf(this, NoResponseError.prototype)\n    this.name = 'NoResponseError'\n  }\n}\n","import { Result } from '../interfaces/Result'\n\nconst makeSuccess = (value: any) => {\n  return {\n    isSuccess: () => true,\n    isFail: () => false,\n    success: () => value,\n    fail: () => {\n      throw new Error('Cannot call fail() on success.')\n    },\n  }\n}\n\nconst makeFail = (value: any) => {\n  return {\n    isSuccess: () => false,\n    isFail: () => true,\n    success: () => {\n      throw new Error('Cannot call success() on fail.')\n    },\n    fail: () => value,\n  }\n}\n\nexport default {\n  success: <F, S>(value: any): Result<F, S> => makeSuccess(value),\n  fail: <F, S>(value: any): Result<F, S> => makeFail(value),\n}\n","export enum ErrorClass {\n  BASIC,\n  FULL,\n  LIMITED,\n}\n","import Axios, { AxiosError, AxiosInstance } from 'axios'\nimport * as qs from 'qs'\nimport { GET, POST } from './constants'\nimport { BasicSlatwallError, ExpandedSlatwallError, MisconfigurationError, NoResponseError, SlatwallError, SlatwallSDKError } from './errors'\n\nimport { IHeaders, SDKScope } from './SDKScope'\nimport Result from './helpers/Result'\nimport { ErrorClass } from './interfaces/errors/ErrorClass'\nimport { JsonApiResponse } from './interfaces/JsonApi'\nimport { ResultResponse } from './interfaces/ResultResponse'\n\nexport class HttpService {\n  public axios: AxiosInstance\n\n  public readonly sdkScope: SDKScope\n\n  constructor(sdkScope: SDKScope) {\n    this.sdkScope = sdkScope\n\n    this.axios = Axios.create({\n      baseURL: this.sdkScope.sdkConfig.host,\n      withCredentials: true,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      paramsSerializer: params => {\n        return qs.stringify(params, { arrayFormat: 'brackets' })\n      },\n    })\n  }\n\n  public async slatwallResponse(method: string, route: string, params: any = {}, headers: IHeaders = {}, source: any = null): Promise<ResultResponse<JsonApiResponse>> {\n    try {\n      let res: any\n      const request = this.axios[method]\n      const requestHeaders = this.createHeaders(headers)\n      source = source || Axios.CancelToken.source()\n      if (method === GET) {\n        // for get request request(urlEndpoint, {axios-config});\n        res = await request(route, {\n          params: params,\n          headers: requestHeaders,\n          cancelToken: source.token,\n        })\n      } else {\n        // for POST, PUT, PATCH request request(urlEndpoint, {payload} {axios-config});\n        res = await request(route, params, {\n          headers: requestHeaders,\n          cancelToken: source.token,\n        })\n      }\n      return Result.success(res.data)\n    } catch (error) {\n      return Result.fail(this.processError(error))\n    }\n  }\n\n  protected classifyError(error: AxiosError): ErrorClass {\n    const { error: errorSummary, errors } = error.response.data\n\n    if (typeof errorSummary === 'string') {\n      if (typeof errors === 'object') {\n        return ErrorClass.FULL\n      }\n      return ErrorClass.BASIC\n    }\n    return ErrorClass.LIMITED\n  }\n\n  protected processError(error: AxiosError): SlatwallSDKError {\n    if (error.response) {\n      // Error from Slatwall outside HTTP 2xx codes\n      return this.processSlatwallError(error)\n    } else if (error.request) {\n      // No response received from Slatwall\n      return new NoResponseError()\n    } else {\n      // Incorrect request setup\n      return new MisconfigurationError(error.message)\n    }\n  }\n\n  protected processSlatwallError(error: AxiosError): SlatwallError {\n    const { error: errorSummary, errors } = error.response.data\n    const errorClass = this.classifyError(error)\n\n    if (errorClass === ErrorClass.FULL) {\n      return new ExpandedSlatwallError(error.response, errorSummary, errors)\n    } else if (errorClass === ErrorClass.BASIC) {\n      return new BasicSlatwallError(error.response, errorSummary)\n    } else {\n      return new SlatwallError(error.response)\n    }\n  }\n\n  protected createHeaders = (headers: IHeaders): IHeaders => {\n    let formattedHeaders: IHeaders = {}\n    if (!headers.bearerToken) {\n      headers.bearerToken = this.sdkScope.bearerToken\n    }\n    formattedHeaders['Auth-Token'] = `Bearer ${headers.bearerToken}`\n    delete headers.bearerToken\n\n    if (headers.contentType == 'form-data') {\n      formattedHeaders['Content-Type'] = 'multipart/form-data; boundary=100'\n    }\n    delete headers.contentType\n\n    //any additional keys\n    Object.keys(headers).map(headerName => {\n      formattedHeaders[headerName] = headers[headerName]\n    })\n\n    return formattedHeaders\n  }\n}\n","import { HttpService } from './HttpService'\n\nexport class SDKConfig {\n  public host = ''\n  public version = 1\n}\n\nexport interface IAuthToken {\n  bearerToken?: string\n}\n\nexport type IHeaders = { [k: string]: string }\n\nexport class SDKScope {\n  public readonly sdkConfig: SDKConfig\n  private authToken: IAuthToken\n  public httpService: HttpService\n\n  constructor(config: SDKConfig, authToken: IAuthToken = {}) {\n    this.sdkConfig = config\n    this.authToken = authToken\n    this.httpService = new HttpService(this)\n  }\n\n  public get bearerToken() {\n    if (this.authToken.bearerToken) {\n      return this.authToken.bearerToken\n    }\n\n    if (checkBrowser()) this.authToken.bearerToken = localStorage.getItem('token')\n    return this.authToken.bearerToken\n  }\n\n  public set bearerToken(bearerToken: string) {\n    this.authToken.bearerToken = bearerToken\n    if (checkBrowser()) localStorage.setItem('token', bearerToken)\n  }\n}\n\nexport default SDKScope\n\n// check if the code is running in browser or not\n// i.e , node or browser\n// @return {boolean}\nexport function checkBrowser() {\n  if (typeof window === 'undefined') {\n    return false\n  }\n  return true\n}\n","import Auth from './endpoints/Auth'\nimport Account from './endpoints/Account'\nimport Cart from './endpoints/Cart'\nimport Products from './endpoints/Products'\nimport ProductType from './endpoints/ProductType'\nimport Brand from './endpoints/Brand'\nimport Category from './endpoints/Category'\nimport Option from './endpoints/Option'\nimport Location from './endpoints/Location'\nimport Order from './endpoints/Order'\nimport Content from './endpoints/Content'\nimport Type from './endpoints/Type'\nimport OrderTemplate from './endpoints/OrderTemplate'\nimport General from './endpoints/General'\nimport Quotes from './endpoints/Quotes'\nimport SDKScope, { SDKConfig } from './SDKScope'\n\nclass Slatwall {\n  public sdkScope: SDKScope\n  public products: Products\n  public cart: Cart\n  public account: Account\n  public auth: Auth\n  public productType: ProductType\n  public brand: Brand\n  public category: Category\n  public location: Location\n  public option: Option\n  public order: Order\n  public content: Content\n  public type: Type\n  public orderTemplate: OrderTemplate\n  public general: General\n  public quotes: Quotes\n\n  constructor(config: SDKConfig) {\n    this.sdkScope = new SDKScope({\n      ...new SDKConfig(),\n      ...config,\n    } as SDKConfig)\n    this.auth = new Auth(this.sdkScope)\n    this.account = new Account(this.sdkScope)\n    this.cart = new Cart(this.sdkScope)\n    this.products = new Products(this.sdkScope)\n    this.productType = new ProductType(this.sdkScope)\n    this.brand = new Brand(this.sdkScope)\n    this.category = new Category(this.sdkScope)\n    this.location = new Location(this.sdkScope)\n    this.option = new Option(this.sdkScope)\n    this.order = new Order(this.sdkScope)\n    this.content = new Content(this.sdkScope)\n    this.type = new Type(this.sdkScope)\n    this.orderTemplate = new OrderTemplate(this.sdkScope)\n    this.general = new General(this.sdkScope)\n    this.quotes = new Quotes(this.sdkScope)\n  }\n}\n\nexport default Slatwall\n","import SDKScope, { SDKConfig, IAuthToken } from './SDKScope'\nimport Slatwall from './Slatwall'\nimport * as errors from './errors'\nimport Result from './helpers/Result'\nimport BaseEndpoint from './BaseEndpoint'\n\nconst init = (config: SDKConfig) => new Slatwall(config)\n\nexport { Slatwall, BaseEndpoint as Http, Result, errors, init }\n"],"sourceRoot":""}