{"version":3,"sources":["webpack://@slatwall/slatwall-sdk/webpack/universalModuleDefinition","webpack://@slatwall/slatwall-sdk/webpack/bootstrap","webpack://@slatwall/slatwall-sdk/webpack/runtime/compat get default export","webpack://@slatwall/slatwall-sdk/webpack/runtime/define property getters","webpack://@slatwall/slatwall-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@slatwall/slatwall-sdk/webpack/runtime/make namespace object","webpack://@slatwall/slatwall-sdk/./src/constants.ts","webpack://@slatwall/slatwall-sdk/./src/BaseEndpoint.ts","webpack://@slatwall/slatwall-sdk/./src/routes.ts","webpack://@slatwall/slatwall-sdk/./src/endpoints/Auth.ts","webpack://@slatwall/slatwall-sdk/./src/endpoints/Account.ts","webpack://@slatwall/slatwall-sdk/./src/endpoints/Cart.ts","webpack://@slatwall/slatwall-sdk/./src/helpers/parseParams.ts","webpack://@slatwall/slatwall-sdk/./src/endpoints/Products.ts","webpack://@slatwall/slatwall-sdk/./src/endpoints/ProductType.ts","webpack://@slatwall/slatwall-sdk/./src/endpoints/Brand.ts","webpack://@slatwall/slatwall-sdk/./src/endpoints/Category.ts","webpack://@slatwall/slatwall-sdk/./src/endpoints/Option.ts","webpack://@slatwall/slatwall-sdk/./src/endpoints/Location.ts","webpack://@slatwall/slatwall-sdk/./src/endpoints/Order.ts","webpack://@slatwall/slatwall-sdk/./src/endpoints/Content.ts","webpack://@slatwall/slatwall-sdk/./src/endpoints/Type.ts","webpack://@slatwall/slatwall-sdk/./src/endpoints/OrderTemplate.ts","webpack://@slatwall/slatwall-sdk/./src/endpoints/General.ts","webpack://@slatwall/slatwall-sdk/external \"axios\"","webpack://@slatwall/slatwall-sdk/external \"qs\"","webpack://@slatwall/slatwall-sdk/./src/errors/SlatwallSDKError.ts","webpack://@slatwall/slatwall-sdk/./src/errors/SlatwallError.ts","webpack://@slatwall/slatwall-sdk/./src/errors/BasicSlatwallError.ts","webpack://@slatwall/slatwall-sdk/external \"lodash/get\"","webpack://@slatwall/slatwall-sdk/./src/errors/ExpandedSlatwallError.ts","webpack://@slatwall/slatwall-sdk/./src/errors/MisconfigurationError.ts","webpack://@slatwall/slatwall-sdk/./src/errors/NoResponseError.ts","webpack://@slatwall/slatwall-sdk/./src/helpers/Result.ts","webpack://@slatwall/slatwall-sdk/./src/interfaces/errors/ErrorClass.ts","webpack://@slatwall/slatwall-sdk/./src/HttpService.ts","webpack://@slatwall/slatwall-sdk/./src/SDKScope.ts","webpack://@slatwall/slatwall-sdk/./src/Slatwall.ts","webpack://@slatwall/slatwall-sdk/./src/index.ts"],"names":["root","factory","exports","module","define","amd","a","i","global","__webpack_require__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","GET","POST","sdkScope","this","Routes","id","login","params","headers","source","httpService","slatwallResponse","result","isSuccess","bearerToken","success","token","generateToken","revokeToken","create","update","changePassword","forgotPassword","resetPassword","createGuestAccount","createGuestAccountPassword","verifyEmailAddress","sendEmailVerificationLink","addEmailAddress","setPrimaryEmailAddress","deleteEmailAddress","addPhoneNumber","setPrimaryPhoneNumber","deletePhoneNumber","addAddress","setPrimaryAddress","updateAddress","deleteAddress","addPaymentMethod","deletePaymentMethod","sePrimaryPaymentMethod","orders","cartsAndQuotes","orderFulfillments","orderDeliveries","giftCards","subscriptionUsage","parentAccount","childAccounts","addCartToSession","clear","updateNotes","addItem","addItems","updateItemQuantity","removeItem","addProductBundleBuild","availableShippingMethods","eligibleFulfillmentMethods","availablePaymentMethods","setPickupDate","clearOrderFulfillment","appliedPromotionCodes","appliedPayments","addShippingAddress","addShippingAddressUsingAccountAddress","addBillingAddressUsingAccountAddress","addShippingMethod","addPickupLocation","updateFulfillment","applyPromoCode","removePromoCode","addBillingAddress","addNewAccountAndSetAsBillingAddress","addEditAccountAndSetAsBillingAddress","addNewAddressAndAttachAsShipping","addEditAddressAndAttachAsShipping","addPayment","removePayment","placeOrder","parseParams","parsedResult","perPage","page","sort","sortOrder","filter","keys","list","getDetails","getSkuSelected","getSkuOptionDetails","search","getGallery","getImagePaths","getOptionsByOptionGroup","getFilterOptions","listSku","getSku","getRelatedProducts","getReviews","getStock","getBundles","createBundleBuild","getBundleBuild","removeBundleBuild","getPickupLocations","countries","states","addressOptions","duplicate","delete","setOrderOnCart","getConfiguration","addFormResponse","getTypesByTypeCode","createAndAddItem","addPromotionCode","removePromotionCode","getAppliedPromotionCodes","getPromotionProducts","removePromotionItems","createWishlist","addWishlistItem","addWishlistItemAndGetWishList","removeWishlistItem","removeWishlistItemAndGetWishList","shareWishlist","getWishlists","getWishListItems","getEntity","require","name","setPrototypeOf","SlatwallSDKError","Error","serverResponse","status","SlatwallError","reducedServerResponse","defineProperties","config","data","request","errorsSummary","BasicSlatwallError","summary","errors","ExpandedSlatwallError","reduce","acc","field","split","shift","node","length","getErrors","path","message","MisconfigurationError","NoResponseError","isFail","fail","makeSuccess","makeFail","ErrorClass","createHeaders","formattedHeaders","contentType","map","headerName","axios","baseURL","sdkConfig","host","withCredentials","paramsSerializer","arrayFormat","method","route","res","requestHeaders","cancelToken","Result","processError","classifyError","error","response","errorSummary","FULL","BASIC","LIMITED","processSlatwallError","errorClass","version","authToken","HttpService","localStorage","getItem","setItem","SDKConfig","auth","account","cart","products","productType","brand","category","location","Location","option","order","content","type","orderTemplate","general","init"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const GET: string = 'get';\nexport const POST: string = 'post';\n","import { SDKScope } from './SDKScope'\n\nexport default class BaseEndpoint {\n  public readonly sdkScope: SDKScope\n\n  constructor(sdkScope: SDKScope) {\n    this.sdkScope = sdkScope\n  }\n}\n","export const Routes = {\n  login: () => `api/auth/login`,\n  logout: () => `api/scope/logout`,\n  getAccount: () => `api/scope/getAccount`,\n  createAccount: () => `api/scope/createAccount`,\n  updateAccount: () => `api/scope/updateAccount`,\n  changePassword: () => `api/scope/changePassword`,\n\n  //public Endpoints\n  forgotPassword: () => `api/scope/forgotPassword`,\n  resetPassowrd: () => `api/scope/resetPasswordUpdate`,\n\n  createGuestAccount: () => `api/scope/guestAccount`,\n  createGuestAccountPassword: () => `api/scope/guestAccountCreatePassword`,\n\n  verifyEmailAddress: () => `api/scope/verifyAccountEmailAddress`,\n  sendEmailVerificationLink: () => `api/scope/sendAccountEmailAddressVerificationEmail`,\n\n  //Email Address management\n  addAccountEmailAddress: () => `api/scope/addAccountEmailAddress`,\n  setPrimaryEmailAddress: () => `api/scope/setPrimaryEmailAddress`,\n  deleteAccountEmailAddress: () => `api/scope/deleteAccountEmailAddress`,\n\n  //Phone number management\n  addAccountPhoneNumber: () => `api/scope/addAccountPhoneNumber`,\n  setPrimaryAccountPhoneNumber: () => `api/scope/setPrimaryPhoneNumber`,\n  deleteAccountPhoneNumber: () => `api/scope/deleteAccountPhoneNumber`,\n\n  //Address Management\n  addAccountAddress: () => `api/scope/addNewAccountAddress`,\n  setPrimaryAccountAddress: () => `api/scope/setPrimaryAccountAddress`,\n  updateAccountAddress: () => `api/scope/updateAccountAddress`, //DEBUG, response action seems wrong\n  deleteAccountAddress: () => `api/scope/deleteAccountAddress`,\n\n  //Account Payment Methods Management\n  addAccountPaymentMethod: () => `api/scope/addAccountPaymentMethod`,\n  deleteAccountPaymentMethod: () => `api/scope/deleteAccountPaymentMethod`,\n  setPrimaryPaymentMethod: () => `api/scope/setPrimaryPaymentMethod`,\n\n  //Account Orders\n  getAccountOrders: () => `/api/scope/getAllOrdersOnAccount`,\n  getAccountQuotes: () => `/api/scope/getAllCartsAndQuotesOnAccount`,\n  getAccountOrderFulfillments: () => `/api/scope/getAllOrderFulfillmentsOnAccount`,\n  getAccountOrderDeliveries: () => `/api/scope/getAllOrderDeliveryOnAccount`,\n  getGiftCardsOnAccount: () => `/api/scope/getAllGiftCardsOnAccount`,\n  getSubscriptionUsage: () => `/api/scope/getSubscriptionsUsageOnAccount`,\n  getParentAccount: () => `/api/scope/getParentOnAccount/`,\n  getChildAccounts: () => `/api/scope/getChildOnAccount`,\n\n  //Checkout Endpoints\n  getCart: () => `/api/scope/getCartData`,\n  addCartToSession: () => `/api/scope/addCartToSession`,\n  clearCart: () => `/api/scope/clearOrder`,\n  updateOrderNotes: () => `/api/scope/updateOrderNotes`,\n  addOrderItem: () => `/api/scope/addOrderItem`,\n  addOrderItems: () => `/api/scope/addOrderItems`,\n  updateOrderItemQuantity: () => `/api/scope/updateOrderItemQuantity`,\n  removeOrderItem: () => `/api/scope/removeOrderItem`,\n  addProductBundleToCart: () => `/api/scope/addProductBundleToCart`,\n\n  getAvailableShippingMethods: () => `/api/scope/getAvailableShippingMethods`,\n  getEligibleFulfillmentMethods: () => `/api/scope/getEligibleFulfillmentMethods`,\n  setPickupDate: () => `/api/scope/setPickupDate`,\n  clearOrderFulfillment: () => `/api/scope/clearOrderFulfillment`,\n  getAvailablePaymentMethods: () => `/api/scope/getAvailablePaymentMethods`,\n  getAppliedPromotionCodes: () => `/api/scope/getAppliedPromotionCodes`,\n  getAppliedPayments: () => `/api/scope/getAppliedPayments`,\n\n  addOrderShippingAddress: () => `/api/scope/addOrderShippingAddress`,\n  addOrderShippingAddressUsingAccountAddress: () => `/api/scope/addShippingAddressUsingAccountAddress`,\n  addOrderBillingAddressUsingAccountAddress: () => `/api/scope/addBillingAddressUsingAccountAddress`,\n  addShippingMethod: () => `/api/scope/addShippingMethodUsingShippingMethodID`,\n  addPickupLocation: () => `/api/scope/addPickupFulfillmentLocation`,\n  changeOrderFulfilment: () => `/api/scope/changeOrderFulfillment`,\n\n  addPromoCode: () => `/api/scope/addPromotionCode`,\n  removePromoCode: () => `/api/scope/removePromotionCode`,\n\n  addBillingAddress: () => `/api/scope/addBillingAddress`,\n  addNewAccountAndSetAsBillingAddress: () => `/api/scope/addNewAccountAddress,addBillingAddressUsingAccountAddress`, //new\n  addEditAccountAndSetAsBillingAddress: () => `/api/scope/addEditAccountAddress,addBillingAddressUsingAccountAddress`, //new\n  addNewAddressAndAttachAsShipping: () => `/api/scope/addNewAccountAddress,addShippingAddressUsingAccountAddress`, //new\n  addEditAddressAndAttachAsShipping: () => `/api/scope/addEditAccountAddress,addShippingAddressUsingAccountAddress`, //new\n  addOrderPayment: () => `/api/scope/addOrderPayment`,\n  removeOrderPayment: () => `/api/scope/removeOrderPayment`,\n\n  placeOrder: () => `/api/scope/placeOrder`,\n\n  //Order Endpoints: TODO:\n  getOrderDetails: () => `/api/scope/getOrderDetails`,\n  duplicateOrder: () => `/api/scope/duplicateOrder`,\n  changeOrder: () => `/api/scope/changeOrder`,\n  deleteOrder: () => `/api/scope/deleteOrder`,\n\n  // Order Template Endpoints\n  createOrderTemplate: () => `api/scope/createOrderTemplate`,\n  addOrderTemplateItem: () => `api/scope/addOrderTemplateItem`,\n  addItemAndCreateWishlist: () => `api/scope/addItemAndCreateWishlist`,\n  removeOrderTemplateItem: () => `api/scope/removeOrderTemplateItem`,\n  getOrderTemplates: () => `api/scope/getOrderTemplates`,\n  addOrderTemplatePromotionCode: () => `api/scope/addOrderTemplatePromotionCode`,\n  getAppliedOrderTemplatePromotionCodes: () => `api/scope/getAppliedOrderTemplatePromotionCodes`,\n  removeOrderTemplatePromotionCode: () => `api/scope/removeOrderTemplatePromotionCode`,\n  getOrderTemplatePromotionProducts: () => `api/scope/getOrderTemplatePromotionProducts`,\n  deleteOrderTemplatePromoItems: () => `api/scope/deleteOrderTemplatePromoItems`,\n  createWishlist: () => `api/scope/createWishlist`,\n  addWishlistItem: () => `api/scope/addWishlistItem`,\n  removeWishlistItem: () => `api/scope/removeWishlistItem`,\n  getWishlists: () => `api/scope/getWishlist`,\n  shareWishlist: () => `api/scope/shareWishlist`,\n  getWishListItems: () => `api/scope/getWishListItems`,\n  addWishlistItemAndGetWishList: () => `api/scope/addWishlistItem,getWishlistItems`, //new\n  removeWishlistItemAndGetWishList: () => `api/scope/removeWishlistItem,getWishlistItems`, //new\n\n  //Product Endpoints\n  listProduct: () => `/api/public/product`,\n  getProduct: (id: string) => `/api/public/product/${id}`,\n  productDetailData: () => `/api/scope/productDetailData`,\n  productSkuSelected: () => `/api/scope/productSkuSelected`,\n  getSkuOptionDetails: () => `/api/scope/getSkuOptionDetails`,\n  getProductOptionsByOptionGroup: () => `/api/scope/getProductOptionsByOptionGroup`,\n  getProductFilterOptions: () => `/api/scope/getProductFilterOptions`,\n  getRelatedProducts: () => `/api/scope/getRelatedProducts`,\n  getProductReviews: () => `/api/scope/getProductReviews`,\n  getProductGallery: () => `api/scope/getProductImageGallery`,\n  getProductBundles: () => `api/scope/getProductBundles`,\n  createProductBundleBuild: () => `api/scope/createProductBundleBuild`,\n  getProductBundleBuild: () => `api/scope/getProductBundleBuild`,\n  removeProductBundleBuild: () => `api/scope/removeProductBundleBuild`,\n  productSearch: () => `/api/scope/productSearch`,\n  getResizedImageByProfileName: () => `/api/scope/getResizedImageByProfileName`,\n\n  //Product Type Endpoints\n  listProductType: () => `/api/producttype`,\n  getProductType: (id: string) => `/api/producttype/${id}`,\n\n  //Sku Endpoints\n  listSku: () => `/api/scope/getSkuList`,\n  getSku: (id: string) => `/api/scope/getSkuList/${id}`,\n  getSkuStock: () => `/api/scope/getSkuStock`,\n\n  //Types API\n  getSystemTypesByTypeCode: () => `api/scope/getSystemTypesByTypeCode`,\n\n  //Brand APIs\n  listBrand: () => `/api/public/brand`,\n  getBrand: (id: string) => `/api/public/brand/${id}`,\n\n  //Categories APIs\n  listCategory: () => `/api/category`,\n  getCategory: (id: string) => `/api/category/${id}`,\n\n  //Options API\n  listOption: () => `/api/option`,\n  getOption: (id: string) => `/api/option/${id}`,\n\n  //Location APIs\n  listLocation: () => `/api/location`,\n  getLocation: (id: string) => `/api/location/${id}`,\n  getPickupLocations: () => `/api/scope/getPickupLocations`,\n  getCountries: () => `/api/scope/getCountries`,\n  getAddressOptions: () => `/api/scope/getAddressOptionsByCountryCode`,\n  getStates: () => `api/scope/getStateCodeOptionsByCountryCode`,\n\n  //TODO: make 2 legacy calling methods\n\n  //Content API\n  addFormResponse: () => `/api/scope/addFormResponse`,\n  getContent: () => `/api/public/content`,\n  getConfiguration: () => `/api/scope/getConfiguration`,\n  getEntity: () => `/api/public/getEntity`,\n}\n","import { POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IQuery } from '../interfaces/Query'\nimport { AuthLoginAttr, IAuthResponseResult, AuthAPIKeyAttr } from '../interfaces/Authentication'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Auth extends BaseEndpoint {\n  public async login(params: AuthLoginAttr, headers: IHeaders = {}, source: any = null): Promise<IAuthResponseResult> {\n    let result = (await this.sdkScope.httpService.slatwallResponse(POST, Routes.login(), params, headers, source)) as IAuthResponseResult\n    if (result.isSuccess()) {\n      //Set bearerToken in local Storage\n      this.sdkScope.bearerToken = result.success().token\n    } else {\n      this.sdkScope.bearerToken = null\n    }\n    return result\n  }\n\n  public async generateToken(params: AuthAPIKeyAttr, headers: IHeaders = {}, source: any = null): Promise<IAuthResponseResult> {\n    let result = (await this.sdkScope.httpService.slatwallResponse(POST, Routes.login(), params, headers, source)) as IAuthResponseResult\n    if (result.isSuccess()) {\n      //Set bearerToken in local Storage\n      this.sdkScope.bearerToken = result.success().token\n    } else {\n      this.sdkScope.bearerToken = null\n    }\n    return result\n  }\n\n  public async revokeToken(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IAuthResponseResult> {\n    this.sdkScope.bearerToken = null\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.logout(), params, headers, source)) as IAuthResponseResult\n  }\n}\n","import { GET, POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IAccountResult } from '../interfaces/Account'\nimport { parseParams, parsePublicParams } from '../helpers/parseParams'\nimport { IQuery } from '../interfaces/Query'\nimport { Routes } from '../routes'\nimport { IAccountCreate, IAccountUpdate, IAccountChangePassword, IAccountForgotPassword, IAccountResetPassword, IAccountCreateGuestAccount, IAccountCreateGuestAccountPassword, IAccountVerifyEmailAddress, IAccountSendEmailVerificationLink, IAccountAddEmailAddress, IAccountSetPrimaryEmailAddress, IAccountDeleteEmailAddress, IAccountAddPhoneNumber, IAccountSetPrimaryPhoneNumber, IAccountDeletePhoneNumber, IAccountAddAddress, IAccountSetPrimaryAddress, IAccountUpdateAddress, IAccountDeleteAddress, IAccountAddPaymentMethod, IAccountDeletePaymentMethod, IAccountSetPrimaryPaymentMethod, IAccountOrders, IAccountCartsAndQuotes, IAccountOrderFulfillments, IAccountOrderDeliveries, IAccountGiftCards, IAccountSubscriptionUsage } from '../interfaces/requests/index'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Account extends BaseEndpoint {\n  public async get(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAccount(), params, headers, source)) as IAccountResult\n  }\n\n  public async create(params: IAccountCreate, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.createAccount(), params, headers, source)) as IAccountResult\n  }\n\n  public async update(params: IAccountUpdate, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.updateAccount(), params, headers, source)) as IAccountResult\n  }\n\n  public async changePassword(params: IAccountChangePassword, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.changePassword(), params, headers, source)) as IAccountResult\n  }\n\n  public async forgotPassword(params: IAccountForgotPassword, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.forgotPassword(), params, headers, source)) as IAccountResult\n  }\n\n  public async resetPassword(params: IAccountResetPassword, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.resetPassowrd(), params, headers, source)) as IAccountResult\n  }\n\n  public async createGuestAccount(params: IAccountCreateGuestAccount, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.createGuestAccount(), params, headers, source)) as IAccountResult\n  }\n\n  public async createGuestAccountPassword(params: IAccountCreateGuestAccountPassword, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.createGuestAccountPassword(), params, headers, source)) as IAccountResult\n  }\n\n  public async verifyEmailAddress(params: IAccountVerifyEmailAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.verifyEmailAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async sendEmailVerificationLink(params: IAccountSendEmailVerificationLink, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.sendEmailVerificationLink(), params, headers, source)) as IAccountResult\n  }\n\n  public async addEmailAddress(params: IAccountAddEmailAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addAccountEmailAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async setPrimaryEmailAddress(params: IAccountSetPrimaryEmailAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.setPrimaryEmailAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async deleteEmailAddress(params: IAccountDeleteEmailAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.deleteAccountEmailAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async addPhoneNumber(params: IAccountAddPhoneNumber, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addAccountPhoneNumber(), params, headers, source)) as IAccountResult\n  }\n\n  public async setPrimaryPhoneNumber(params: IAccountSetPrimaryPhoneNumber, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.setPrimaryAccountPhoneNumber(), params, headers, source)) as IAccountResult\n  }\n\n  public async deletePhoneNumber(params: IAccountDeletePhoneNumber, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.deleteAccountPhoneNumber(), params, headers, source)) as IAccountResult\n  }\n\n  public async addAddress(params: IAccountAddAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addAccountAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async setPrimaryAddress(params: IAccountSetPrimaryAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.setPrimaryAccountAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async updateAddress(params: IAccountUpdateAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.updateAccountAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async deleteAddress(params: IAccountDeleteAddress, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.deleteAccountAddress(), params, headers, source)) as IAccountResult\n  }\n\n  public async addPaymentMethod(params: IAccountAddPaymentMethod, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addAccountPaymentMethod(), params, headers, source)) as IAccountResult\n  }\n\n  public async deletePaymentMethod(params: IAccountDeletePaymentMethod, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.deleteAccountPaymentMethod(), params, headers, source)) as IAccountResult\n  }\n\n  public async sePrimaryPaymentMethod(params: IAccountSetPrimaryPaymentMethod, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.setPrimaryPaymentMethod(), params, headers, source)) as IAccountResult\n  }\n\n  public async orders(params: IAccountOrders, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getAccountOrders(), params, headers, source)) as IAccountResult\n  }\n\n  public async cartsAndQuotes(params: IAccountCartsAndQuotes, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getAccountQuotes(), params, headers, source)) as IAccountResult\n  }\n\n  public async orderFulfillments(params: IAccountOrderFulfillments, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getAccountOrderFulfillments(), params, headers, source)) as IAccountResult\n  }\n\n  public async orderDeliveries(params: IAccountOrderDeliveries, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getAccountOrderDeliveries(), params, headers, source)) as IAccountResult\n  }\n\n  public async giftCards(params: IAccountGiftCards, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getGiftCardsOnAccount(), params, headers, source)) as IAccountResult\n  }\n\n  public async subscriptionUsage(params: IAccountSubscriptionUsage, headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getSubscriptionUsage(), params, headers, source)) as IAccountResult\n  }\n\n  public async parentAccount(headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getParentAccount(), {}, headers, source)) as IAccountResult\n  }\n\n  public async childAccounts(headers: IHeaders = {}, source: any = null): Promise<IAccountResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getChildAccounts(), {}, headers, source)) as IAccountResult\n  }\n}\n","import { GET, POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IOrderResult } from '../interfaces/Order'\nimport { IQuery } from '../interfaces/Query'\nimport { Routes } from '../routes'\nimport { ICartClear, ICartUpdateNotes, ICartAddItem, ICartAddItems, ICartUpdateItemQuantity, ICartRemoveItem, ICartAddProductBundleBuild, ICartAvailableShippingMethods, ICartAddShippingAddress, ICartAddShippingAddressUsingAccountAddress, ICartAddBillingAddressUsingAccountAddress, ICartAddShippingMethod, ICartAddPickupLocation, ICartUpdateFulfillment, ICartSetPickupDate, ICartClearOrderFulfillment, ICartApplyPromoCode, ICartRemovePromoCode, ICartAddBillingAddress, ICartAddPayment, ICartRemovePayment, ICartPlaceOrder } from '../interfaces/requests/index'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Cart extends BaseEndpoint {\n  public async get(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getCart(), params, headers, source)) as IOrderResult\n  }\n\n  public async addCartToSession(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addCartToSession(), params, headers, source)) as IOrderResult\n  }\n\n  public async clear(params: ICartClear, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.clearCart(), params, headers, source)) as IOrderResult\n  }\n\n  public async updateNotes(params: ICartUpdateNotes, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.updateOrderNotes(), params, headers, source)) as IOrderResult\n  }\n\n  public async addItem(params: ICartAddItem, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderItem(), params, headers, source)) as IOrderResult\n  }\n\n  public async addItems(params: ICartAddItems, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderItems(), params, headers, source)) as IOrderResult\n  }\n\n  public async updateItemQuantity(params: ICartUpdateItemQuantity, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.updateOrderItemQuantity(), params, headers, source)) as IOrderResult\n  }\n\n  public async removeItem(params: ICartRemoveItem, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.removeOrderItem(), params, headers, source)) as IOrderResult\n  }\n\n  public async addProductBundleBuild(params: ICartAddProductBundleBuild, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addProductBundleToCart(), params, headers, source)) as IOrderResult\n  }\n\n  public async availableShippingMethods(params: ICartAvailableShippingMethods, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAvailableShippingMethods(), params, headers, source)) as IOrderResult\n  }\n\n  public async eligibleFulfillmentMethods(headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getEligibleFulfillmentMethods(), {}, headers, source)) as IOrderResult\n  }\n\n  public async availablePaymentMethods(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAvailablePaymentMethods(), params, headers, source)) as IOrderResult\n  }\n\n  public async setPickupDate(params: ICartSetPickupDate, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.setPickupDate(), params, headers, source)) as IOrderResult\n  }\n\n  public async clearOrderFulfillment(params: ICartClearOrderFulfillment, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.clearOrderFulfillment(), params, headers, source)) as IOrderResult\n  }\n\n  public async appliedPromotionCodes(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAppliedPromotionCodes(), params, headers, source)) as IOrderResult\n  }\n\n  public async appliedPayments(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAppliedPayments(), params, headers, source)) as IOrderResult\n  }\n\n  public async addShippingAddress(params: ICartAddShippingAddress, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderShippingAddress(), params, headers, source)) as IOrderResult\n  }\n\n  public async addShippingAddressUsingAccountAddress(params: ICartAddShippingAddressUsingAccountAddress, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderShippingAddressUsingAccountAddress(), params, headers, source)) as IOrderResult\n  }\n\n  public async addBillingAddressUsingAccountAddress(params: ICartAddBillingAddressUsingAccountAddress, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderBillingAddressUsingAccountAddress(), params, headers, source)) as IOrderResult\n  }\n\n  public async addShippingMethod(params: ICartAddShippingMethod, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addShippingMethod(), params, headers, source)) as IOrderResult\n  }\n\n  public async addPickupLocation(params: ICartAddPickupLocation, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addPickupLocation(), params, headers, source)) as IOrderResult\n  }\n\n  public async updateFulfillment(params: ICartUpdateFulfillment, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.changeOrderFulfilment(), params, headers, source)) as IOrderResult\n  }\n\n  public async applyPromoCode(params: ICartApplyPromoCode, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addPromoCode(), params, headers, source)) as IOrderResult\n  }\n\n  public async removePromoCode(params: ICartRemovePromoCode, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.removePromoCode(), params, headers, source)) as IOrderResult\n  }\n\n  public async addBillingAddress(params: ICartAddBillingAddress, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addBillingAddress(), params, headers, source)) as IOrderResult\n  }\n\n  public async addNewAccountAndSetAsBillingAddress(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addNewAccountAndSetAsBillingAddress(), params, headers, source)) as IOrderResult\n  }\n  public async addEditAccountAndSetAsBillingAddress(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addEditAccountAndSetAsBillingAddress(), params, headers, source)) as IOrderResult\n  }\n  public async addNewAddressAndAttachAsShipping(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addNewAddressAndAttachAsShipping(), params, headers, source)) as IOrderResult\n  }\n  public async addEditAddressAndAttachAsShipping(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addEditAddressAndAttachAsShipping(), params, headers, source)) as IOrderResult\n  }\n\n  public async addPayment(params: ICartAddPayment, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addOrderPayment(), params, headers, source)) as IOrderResult\n  }\n\n  public async removePayment(params: ICartRemovePayment, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.removeOrderPayment(), params, headers, source)) as IOrderResult\n  }\n\n  public async placeOrder(params: ICartPlaceOrder, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.placeOrder(), params, headers, source)) as IOrderResult\n  }\n}\n","import { IQuery } from '../interfaces/Query';\n\nexport const parseParams = (params: IQuery = {}) => {\n  let parsedResult = {};\n  \n  if( params.perPage ) {\n    parsedResult[\"p:show\"] = params.perPage;\n  }\n  \n  if( params.page ) {\n    parsedResult[\"p:current\"] = params.page;\n  }\n  \n  if( params.sort && params.sortOrder ) {\n    parsedResult[\"orderBy\"] = params.sort+\"|\"+params.sortOrder;\n  }\n  \n  if( params.filter ) {\n    for(let key of Object.keys(params.filter) ) {\n        if(key != \"\" && params.filter[key] !== \"\") {\n           parsedResult[\"f:\"+key] = params.filter[key];\n        }\n    }\n  }\n  return parsedResult;\n}\n\nexport const parsePublicParams = (params: IQuery = {}) => {\n  let parsedResult = {};\n  \n  if( params.perPage ) {\n    parsedResult[\"pageRecordsShow\"] = params.perPage;\n  }\n  \n  if( params.page ) {\n    parsedResult[\"currentPage\"] = params.page;\n  }\n  \n  if( params.filter ) {\n    for(let key of Object.keys(params.filter) ) {\n        if(key != \"\" && params.filter[key] !== \"\") {\n           parsedResult[key] = params.filter[key];\n        }\n    }\n  }\n  return parsedResult;\n}\n\n\n","import BaseEndpoint from '../BaseEndpoint'\nimport { GET, POST } from '../constants'\nimport { parseParams } from '../helpers/parseParams'\nimport { IProductResult, IProductsResult } from '../interfaces/Product'\nimport { IProductFilterOptionsResult } from '../interfaces/ProductFilterOption'\nimport { IProductOptionGroupResult } from '../interfaces/ProductOptionGroup'\nimport { IQuery, productOptionGroup } from '../interfaces/Query'\nimport { IProductsGetFilterOptions, IProductsGetGallery, IProductsGetImagePaths, IProductsGetDetails, IProductsGetOptionsByOptionGroup, IProductsGetRelatedProducts, IProductsGetReviews, IProductsGetStock, IProductsGetBundles, IProductsCreateBundleBuild, IProductsGetBundleBuild, IProductsRemoveBundleBuild } from '../interfaces/requests/index'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Products extends BaseEndpoint {\n  public async list(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.listProduct(), parseParams(params), headers, source)) as IProductsResult\n  }\n\n  public async get(id: string, headers: IHeaders = {}, source: any = null): Promise<IProductResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getProduct(id), headers, source)) as IProductResult\n  }\n\n  public async getDetails(params: IProductsGetDetails, headers: IHeaders = {}, source: any = null): Promise<IProductResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.productDetailData(), params, headers, source)) as IProductResult\n  }\n\n  public async getSkuSelected(params: IProductsGetDetails, headers: IHeaders = {}, source: any = null): Promise<IProductResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.productSkuSelected(), params, headers, source)) as IProductResult\n  }\n\n  public async getSkuOptionDetails(params: IProductsGetDetails, headers: IHeaders = {}, source: any = null): Promise<IProductResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getSkuOptionDetails(), params, headers, source)) as IProductResult\n  }\n\n  public async search(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.productSearch(), params, headers, source)) as IProductsResult\n  }\n\n  public async getGallery(params: IProductsGetGallery, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getProductGallery(), params, headers, source)) as IProductsResult\n  }\n\n  public async getImagePaths(params: IProductsGetImagePaths, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getResizedImageByProfileName(), params, headers, source)) as IProductsResult\n  }\n\n  public async getOptionsByOptionGroup(params: IProductsGetOptionsByOptionGroup, headers: IHeaders = {}, source: any = null): Promise<IProductOptionGroupResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getProductOptionsByOptionGroup(), params, headers, source)) as IProductOptionGroupResult\n  }\n\n  public async getFilterOptions(params: IProductsGetFilterOptions, headers: IHeaders = {}, source: any = null): Promise<IProductFilterOptionsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getProductFilterOptions(), params, headers, source)) as IProductFilterOptionsResult\n  }\n\n  public async listSku(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.listSku(), parseParams(params), headers, source)) as IProductsResult\n  }\n\n  public async getSku(id: string, headers: IHeaders = {}, source: any = null): Promise<IProductResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getSku(id), headers, source)) as IProductResult\n  }\n\n  public async getRelatedProducts(params: IProductsGetRelatedProducts, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getRelatedProducts(), params, headers, source)) as IProductsResult\n  }\n\n  public async getReviews(params: IProductsGetReviews, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getProductReviews(), params, headers, source)) as IProductsResult\n  }\n\n  public async getStock(params: IProductsGetStock, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getSkuStock(), params, headers, source)) as IProductsResult\n  }\n\n  public async getBundles(params: IProductsGetBundles, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getProductBundles(), params, headers, source)) as IProductsResult\n  }\n\n  public async createBundleBuild(params: IProductsCreateBundleBuild, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.createProductBundleBuild(), params, headers, source)) as IProductsResult\n  }\n\n  public async getBundleBuild(params: IProductsGetBundleBuild, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getProductBundleBuild(), params, headers, source)) as IProductsResult\n  }\n\n  public async removeBundleBuild(params: IProductsRemoveBundleBuild, headers: IHeaders = {}, source: any = null): Promise<IProductsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.removeProductBundleBuild(), params, headers, source)) as IProductsResult\n  }\n}\n","import { GET } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IProductTypeResult, IProductTypesResult } from '../interfaces/ProductType'\nimport { IQuery } from '../interfaces/Query'\nimport { parseParams } from '../helpers/parseParams'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\n\nexport default class ProductType extends BaseEndpoint {\n  public async list(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IProductTypesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.listProductType(), parseParams(params), headers, source)) as IProductTypesResult\n  }\n\n  public async get(id: string, headers: IHeaders = {}, source: any = null): Promise<IProductTypeResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getProductType(id), {}, headers, source)) as IProductTypeResult\n  }\n}\n","import { GET } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IBrandResult, IBrandsResult } from '../interfaces/Brand'\nimport { IQuery } from '../interfaces/Query'\nimport { parseParams } from '../helpers/parseParams'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Brand extends BaseEndpoint {\n  public async list(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IBrandsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.listBrand(), parseParams(params), headers, source)) as IBrandsResult\n  }\n\n  public async get(id: string, headers: IHeaders = {}, source: any = null): Promise<IBrandResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getBrand(id), {}, headers, source)) as IBrandResult\n  }\n}\n","import { GET } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { ICategoryResult, ICategoriesResult } from '../interfaces/Category'\nimport { IQuery } from '../interfaces/Query'\nimport { parseParams } from '../helpers/parseParams'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Category extends BaseEndpoint {\n  public async list(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<ICategoriesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.listCategory(), parseParams(params), headers, source)) as ICategoriesResult\n  }\n\n  public async get(id: string, headers: IHeaders = {}, source: any = null): Promise<ICategoryResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getCategory(id), {}, headers, source)) as ICategoryResult\n  }\n}\n","import { GET } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IOptionResult, IOptionsResult } from '../interfaces/Option'\nimport { IQuery } from '../interfaces/Query'\nimport { parseParams } from '../helpers/parseParams'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Option extends BaseEndpoint {\n  public async list(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IOptionsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.listOption(), parseParams(params), headers, source)) as IOptionsResult\n  }\n\n  public async get(id: string, headers: IHeaders = {}, source: any = null): Promise<IOptionResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getOption(id), {}, headers, source)) as IOptionResult\n  }\n}\n","import { GET } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { ILocationResult, ILocationsResult } from '../interfaces/Location'\nimport { IQuery } from '../interfaces/Query'\nimport { parseParams } from '../helpers/parseParams'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Option extends BaseEndpoint {\n  public async list(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<ILocationsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.listLocation(), parseParams(params), headers, source)) as ILocationsResult\n  }\n\n  public async get(id: string, headers: IHeaders = {}, source: any = null): Promise<ILocationResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getLocation(id), {}, headers, source)) as ILocationResult\n  }\n\n  public async getPickupLocations(headers: IHeaders = {}, source: any = null): Promise<ILocationsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getPickupLocations(), {}, headers, source)) as ILocationsResult\n  }\n\n  public async countries(headers: IHeaders = {}, source: any = null): Promise<ILocationsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getCountries(), {}, headers, source)) as ILocationsResult\n  }\n\n  public async states(params: { countryCode: string }, headers: IHeaders = {}, source: any = null): Promise<ILocationsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getStates(), params, headers, source)) as ILocationsResult\n  }\n\n  public async addressOptions(params: {}, headers: IHeaders = {}, source: any = null): Promise<ILocationsResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAddressOptions(), params, headers, source)) as ILocationsResult\n  }\n}\n","import { POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IOrderResult } from '../interfaces/Order'\nimport { IQuery } from '../interfaces/Query'\nimport { parseParams } from '../helpers/parseParams'\nimport { Routes } from '../routes'\nimport { IOrderDuplicate, IOrderDelete, IOrderSetOrderOnCart } from '../interfaces/requests/index'\nimport { IHeaders } from '../SDKScope'\nexport default class Order extends BaseEndpoint {\n  public async get(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.getOrderDetails(), params, headers, source)) as IOrderResult\n  }\n\n  public async duplicate(params: IOrderDuplicate, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.duplicateOrder(), params, headers, source)) as IOrderResult\n  }\n\n  public async delete(params: IOrderDelete, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.deleteOrder(), params, headers, source)) as IOrderResult\n  }\n\n  public async setOrderOnCart(params: IOrderSetOrderOnCart, headers: IHeaders = {}, source: any = null): Promise<IOrderResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.changeOrder(), params, headers, source)) as IOrderResult\n  }\n}\n","import { GET, POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { IContentResult } from '../interfaces/Content'\nimport { IQuery } from '../interfaces/Query'\nimport { Routes } from '../routes'\nimport { IHeaders } from '../SDKScope'\nimport { IContentData, IContentGetConfiguration } from '../interfaces/requests/index'\n\nexport default class Content extends BaseEndpoint {\n  public async get(params: IContentData, headers: IHeaders = {}, source: any = null): Promise<IContentResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getContent(), params, headers, source)) as IContentResult\n  }\n\n  public async getConfiguration(params: IContentGetConfiguration, headers: IHeaders = {}, source: any = null): Promise<IContentResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getConfiguration(), params, headers, source)) as IContentResult\n  }\n  public async addFormResponse(params: any = {}, headers: IHeaders = {}, source: any = null): Promise<IContentResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addFormResponse(), params, headers, source)) as IContentResult\n  }\n}\n","import { GET, POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { Routes } from '../routes'\nimport { IQuery, productOptionGroup } from '../interfaces/Query'\n\nimport { ITypeResult, ITypesResult } from '../interfaces/Type'\nimport { IHeaders } from '../SDKScope'\n\nexport default class Type extends BaseEndpoint {\n  public async getTypesByTypeCode(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<ITypesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getSystemTypesByTypeCode(), params, headers, source)) as ITypesResult\n  }\n}\n","import { GET, POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { Routes } from '../routes'\nimport { IQuery } from '../interfaces/Query'\nimport { IOrderTemplateResult, IOrderTemplatesResult } from '../interfaces/OrderTemplate'\n\nimport { IWishListShare, IWishListRemoveItem, IOrderTemplateCreate, IOrderTemplateCreateAndAddItem, IOrderTemplateGet, IOrderTemplateList, IOrderTemplateAddItem, IOrderTemplateRemoveItem, IOrderTemplateAddPromotionCode, IOrderTemplateRemovePromotionCode, IOrderTemplateGetAppliedPromotionCode } from '../interfaces/requests/OrderTemplate'\nimport { IHeaders } from '../SDKScope'\n\nexport default class OrderTemplate extends BaseEndpoint {\n  public async create(params: IOrderTemplateCreate, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.createOrderTemplate(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async addItem(params: IOrderTemplateAddItem, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.addOrderTemplateItem(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async createAndAddItem(params: IOrderTemplateCreateAndAddItem, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.addItemAndCreateWishlist(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async removeItem(params: IOrderTemplateRemoveItem, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.removeOrderTemplateItem(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async addPromotionCode(params: IOrderTemplateAddPromotionCode, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.addOrderTemplatePromotionCode(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async removePromotionCode(params: IOrderTemplateRemovePromotionCode, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.removeOrderTemplatePromotionCode(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async getAppliedPromotionCodes(params: IOrderTemplateGet, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getAppliedOrderTemplatePromotionCodes(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async getPromotionProducts(params: IOrderTemplateGetAppliedPromotionCode, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getOrderTemplatePromotionProducts(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async removePromotionItems(params: IOrderTemplateGetAppliedPromotionCode, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.deleteOrderTemplatePromoItems(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async list(params: IOrderTemplateList, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplatesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getOrderTemplates(), params, headers, source)) as IOrderTemplatesResult\n  }\n\n  public async createWishlist(params: IOrderTemplateCreate, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.createWishlist(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async addWishlistItem(params: IOrderTemplateAddItem, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.addWishlistItem(), params, headers, source)) as IOrderTemplateResult\n  }\n  public async addWishlistItemAndGetWishList(params: IOrderTemplateAddItem, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.addWishlistItemAndGetWishList(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async removeWishlistItem(params: IWishListRemoveItem, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.removeWishlistItem(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async removeWishlistItemAndGetWishList(params: IWishListRemoveItem, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(POST, Routes.removeWishlistItemAndGetWishList(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async shareWishlist(params: IWishListShare, headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.shareWishlist(), params, headers, source)) as IOrderTemplateResult\n  }\n\n  public async getWishlists(headers: IHeaders = {}, source: any = null): Promise<IOrderTemplateResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getWishlists(), {}, headers, source)) as IOrderTemplateResult\n  }\n\n  public async getWishListItems(headers: IHeaders = {}, source: any = null): Promise<IOrderTemplatesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getWishListItems(), {}, headers, source)) as IOrderTemplatesResult\n  }\n}\n","import { GET, POST } from '../constants'\nimport BaseEndpoint from '../BaseEndpoint'\nimport { Routes } from '../routes'\nimport { IQuery } from '../interfaces/Query'\n\nimport { ITypesResult } from '../interfaces/Type'\nimport { IHeaders } from '../SDKScope'\n\nexport default class General extends BaseEndpoint {\n  public async getEntity(params: IQuery = {}, headers: IHeaders = {}, source: any = null): Promise<ITypesResult> {\n    return (await this.sdkScope.httpService.slatwallResponse(GET, Routes.getEntity(), params, headers, source)) as ITypesResult\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"axios\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"qs\");;","export default class SlatwallSDKError extends Error {\n  constructor(name: string) {\n    super(name);\n    (Object as any).setPrototypeOf(this, SlatwallSDKError.prototype);\n  }\n}\n","import { AxiosResponse } from 'axios';\nimport SlatwallSDKError from './SlatwallSDKError';\n\nexport default class SlatwallError extends SlatwallSDKError {\n  public serverResponse: AxiosResponse;\n\n  constructor(serverResponse: AxiosResponse) {\n    super(`Slatwall returned a HTTP ${serverResponse.status} error code`);\n    (Object as any).setPrototypeOf(this, SlatwallError.prototype);\n    this.name = 'SpreeError';\n    const reducedServerResponse = { ...serverResponse };\n    // Reduce logging by removing the 'enumerable' flag on some keys in AxiosResponse.\n    Object.defineProperties(\n      reducedServerResponse,\n      {\n        config: { enumerable: false },\n        data: { enumerable: false },\n        headers: { enumerable: false },\n        request: { enumerable: false }\n      }\n    );\n    this.serverResponse = reducedServerResponse;\n  }\n}\n","import { AxiosResponse } from 'axios';\nimport SlatwallError from './SlatwallError';\n\nclass BasicSlatwallError extends SlatwallError {\n  public summary: string;\n\n  constructor(serverResponse: AxiosResponse, errorsSummary: string) {\n    super(serverResponse);\n    (Object as any).setPrototypeOf(this, BasicSlatwallError.prototype);\n    this.name = 'BasicSlatwallError';\n    this.summary = errorsSummary;\n  }\n}\n\nexport default BasicSlatwallError;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash/get\");;","import { AxiosResponse } from 'axios';\nimport get from 'lodash/get';\nimport BasicSlatwallError from './BasicSlatwallError';\n\nexport default class ExpandedSlatwallError extends BasicSlatwallError {\n  public errors: any;\n\n  constructor(serverResponse: AxiosResponse, errorsSummary: string, errors: any) {\n    super(serverResponse, errorsSummary);\n    (Object as any).setPrototypeOf(this, ExpandedSlatwallError.prototype);\n    this.name = 'ExpandedSlatwallError';\n    this.errors = Object.keys(errors).reduce((acc, field) => {\n      const keys = field.split('.');\n      let key = keys.shift();\n      let node = acc;\n      while (key) {\n        if (!node[key]) {\n          if (keys.length === 0) {\n            node[key] = errors[field];\n          } else {\n            node[key] = {};\n          }\n        }\n        node = node[key];\n        key = keys.shift();\n      }\n      return acc;\n    }, {});\n  }\n\n  public getErrors(path: string[]): string[] | null {\n    return get(this.errors, path, null);\n  }\n}\n","import SlatwallSDKError from './SlatwallSDKError';\n\nexport default class MisconfigurationError extends SlatwallSDKError {\n  constructor(message: string) {\n    super(`Incorrect request setup: ${message}`);\n    (Object as any).setPrototypeOf(this, MisconfigurationError.prototype);\n    this.name = 'MisconfigurationError';\n  }\n}\n","import SlatwallSDKError from './SlatwallSDKError';\n\nexport default class NoResponseError extends SlatwallSDKError {\n  constructor() {\n    super('No response received from Spree');\n    (Object as any).setPrototypeOf(this, NoResponseError.prototype);\n    this.name = 'NoResponseError';\n  }\n}\n","import { Result } from '../interfaces/Result';\n\nconst makeSuccess = (value: any) => {\n  return {\n    isSuccess: () => true,\n    isFail: () => false,\n    success: () => value,\n    fail: () => {\n      throw new Error('Cannot call fail() on success.');\n    }\n  };\n};\n\nconst makeFail = (value: any) => {\n  return {\n    isSuccess: () => false,\n    isFail: () => true,\n    success: () => {\n      throw new Error('Cannot call success() on fail.');\n    },\n    fail: () => value\n  };\n};\n\nexport default {\n  success: <F, S>(value: any): Result<F, S> => makeSuccess(value),\n  fail: <F, S>(value: any): Result<F, S> => makeFail(value)\n};\n","export enum ErrorClass {\n  BASIC,\n  FULL,\n  LIMITED\n}\n","import Axios, { AxiosError, AxiosInstance } from 'axios'\nimport * as qs from 'qs'\nimport { GET, POST } from './constants'\nimport { BasicSlatwallError, ExpandedSlatwallError, MisconfigurationError, NoResponseError, SlatwallError, SlatwallSDKError } from './errors'\n\nimport { IHeaders, SDKScope } from './SDKScope'\nimport Result from './helpers/Result'\nimport { ErrorClass } from './interfaces/errors/ErrorClass'\nimport { JsonApiResponse } from './interfaces/JsonApi'\nimport { ResultResponse } from './interfaces/ResultResponse'\n\nexport class HttpService {\n  public axios: AxiosInstance\n\n  public readonly sdkScope: SDKScope\n\n  constructor(sdkScope: SDKScope) {\n    this.sdkScope = sdkScope\n\n    this.axios = Axios.create({\n      baseURL: this.sdkScope.sdkConfig.host,\n      withCredentials: true,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      paramsSerializer: params => {\n        return qs.stringify(params, { arrayFormat: 'brackets' })\n      },\n    })\n  }\n\n  public async slatwallResponse(method: string, route: string, params: any = {}, headers: IHeaders = {}, source: any = null): Promise<ResultResponse<JsonApiResponse>> {\n    try {\n      let res: any\n      const request = this.axios[method]\n      const requestHeaders = this.createHeaders(headers)\n      source = source || Axios.CancelToken.source()\n      if (method === GET) {\n        // for get request request(urlEndpoint, {axios-config});\n        res = await request(route, {\n          params: params,\n          headers: requestHeaders,\n          cancelToken: source.token,\n        })\n      } else {\n        // for POST, PUT, PATCH request request(urlEndpoint, {payload} {axios-config});\n        res = await request(route, params, {\n          headers: requestHeaders,\n          cancelToken: source.token,\n        })\n      }\n      return Result.success(res.data)\n    } catch (error) {\n      return Result.fail(this.processError(error))\n    }\n  }\n\n  protected classifyError(error: AxiosError): ErrorClass {\n    const { error: errorSummary, errors } = error.response.data\n\n    if (typeof errorSummary === 'string') {\n      if (typeof errors === 'object') {\n        return ErrorClass.FULL\n      }\n      return ErrorClass.BASIC\n    }\n    return ErrorClass.LIMITED\n  }\n\n  protected processError(error: AxiosError): SlatwallSDKError {\n    if (error.response) {\n      // Error from Slatwall outside HTTP 2xx codes\n      return this.processSlatwallError(error)\n    } else if (error.request) {\n      // No response received from Slatwall\n      return new NoResponseError()\n    } else {\n      // Incorrect request setup\n      return new MisconfigurationError(error.message)\n    }\n  }\n\n  protected processSlatwallError(error: AxiosError): SlatwallError {\n    const { error: errorSummary, errors } = error.response.data\n    const errorClass = this.classifyError(error)\n\n    if (errorClass === ErrorClass.FULL) {\n      return new ExpandedSlatwallError(error.response, errorSummary, errors)\n    } else if (errorClass === ErrorClass.BASIC) {\n      return new BasicSlatwallError(error.response, errorSummary)\n    } else {\n      return new SlatwallError(error.response)\n    }\n  }\n\n  protected createHeaders = (headers: IHeaders): IHeaders => {\n    let formattedHeaders: IHeaders = {}\n    if (!headers.bearerToken) {\n      headers.bearerToken = this.sdkScope.bearerToken\n    }\n    formattedHeaders['Auth-Token'] = `Bearer ${headers.bearerToken}`\n    delete headers.bearerToken\n\n    if (headers.contentType == 'form-data') {\n      formattedHeaders['Content-Type'] = 'multipart/form-data; boundary=100'\n    }\n    delete headers.contentType\n\n    //any additional keys\n    Object.keys(headers).map(headerName => {\n      formattedHeaders[headerName] = headers[headerName]\n    })\n\n    return formattedHeaders\n  }\n}\n","import { HttpService } from \"./HttpService\";\n\nexport class SDKConfig {\n  private host = '';\n  private version = 1;\n}\n\nexport interface IAuthToken {\n  bearerToken?: string;\n}\n\nexport type IHeaders = { [k:string] : string};\n\nexport class SDKScope {\n  public readonly sdkConfig: any;\n  private authToken: any;\n  public httpService : HttpService;\n  \n  constructor(config: SDKConfig, authToken: IAuthToken = {} ) {\n    this.sdkConfig =  config;\n    this.authToken = authToken;\n    this.httpService = new HttpService(this);\n  }\n\n  public get bearerToken() {\n    if(this.authToken.bearerToken){\n      return this.authToken.bearerToken;\n    }\n\n    this.authToken.bearerToken = localStorage.getItem('token');\n    return this.authToken.bearerToken;\n  }\n\n  public set bearerToken(bearerToken: string) {\n    this.authToken.bearerToken = bearerToken;\n    localStorage.setItem('token', bearerToken);\n  }\n  \n}\n\nexport default SDKScope;\n","import Auth from \"./endpoints/Auth\";\nimport Account from \"./endpoints/Account\";\nimport Cart from \"./endpoints/Cart\";\nimport Products from \"./endpoints/Products\";\nimport ProductType from \"./endpoints/ProductType\";\nimport Brand from \"./endpoints/Brand\";\nimport Category from \"./endpoints/Category\";\nimport Option from \"./endpoints/Option\";\nimport Location from \"./endpoints/Location\";\nimport Order from \"./endpoints/Order\";\nimport Content from \"./endpoints/Content\";\nimport Type from \"./endpoints/Type\";\nimport OrderTemplate from \"./endpoints/OrderTemplate\";\nimport General from \"./endpoints/General\";\nimport SDKScope, { SDKConfig } from \"./SDKScope\";\n\nclass Slatwall {\n  private readonly sdkScope: SDKScope;\n  public products: Products;\n  public cart: Cart;\n  public account: Account;\n  public auth: Auth;\n  public productType: ProductType;\n  public brand: Brand;\n  public category: Category;\n  public location: Location;\n  public option: Option;\n  public order: Order;\n  public content: Content;\n  public type: Type;\n  public orderTemplate: OrderTemplate;\n  public general: General;\n\n  constructor(config: SDKConfig) {\n    this.sdkScope = new SDKScope({\n      ...new SDKConfig(),\n      ...config,\n    } as SDKConfig);\n    this.auth = new Auth(this.sdkScope);\n    this.account = new Account(this.sdkScope);\n    this.cart = new Cart(this.sdkScope);\n    this.products = new Products(this.sdkScope);\n    this.productType = new ProductType(this.sdkScope);\n    this.brand = new Brand(this.sdkScope);\n    this.category = new Category(this.sdkScope);\n    this.location = new Location(this.sdkScope);\n    this.option = new Option(this.sdkScope);\n    this.order = new Order(this.sdkScope);\n    this.content = new Content(this.sdkScope);\n    this.type = new Type(this.sdkScope);\n    this.orderTemplate = new OrderTemplate(this.sdkScope);\n    this.general = new General(this.sdkScope);\n  }\n}\n\nexport default Slatwall;\n","import SDKScope, { SDKConfig, IAuthToken } from './SDKScope';\nimport Slatwall from './Slatwall';\nimport * as errors from './errors';\nimport Result from './helpers/Result';\nimport BaseEndpoint from './BaseEndpoint';\n\nconst init = (config: SDKConfig) => new Slatwall(config);\n\nexport { Slatwall, BaseEndpoint as Http, Result, errors, init };\n"],"sourceRoot":""}