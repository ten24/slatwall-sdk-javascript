import BaseEndpoint from '../BaseEndpoint';
import { IQuotesResult } from '../interfaces/Quote';
import { IQuery } from '../interfaces/Query';
import { IHeaders } from '../SDKScope';
import { IGetQuote, ICreateQuote, IAddQuoteItem, IUpdateQuoteItemQuantity, IQuoteShippingAddress, IQuoteSubmitForApproval, IQuoteSetPickupDate, IQuoteClearOrderFulfillment, IQuoteNotes, IQuoteAddShippingAddressUsingAccountAddress, IQuoteAddBillingAddressUsingAccountAddress, IQuoteAddShippingMethod, IQuoteAddPayment, IQuoteRemovePayment, IQuotePlaceOrder, IQuoteAddBillingAddress, IQuoteRemovePromoCode, IQuoteApplyPromoCode, IQuoteUpdateFulfillment, IQuoteAddPickupLocation, IRemoveQuoteItem, IQuoteUpdate } from '../interfaces/requests/Quote';
export default class Quotes extends BaseEndpoint {
    get(params: IGetQuote, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    updateNotes(params: IQuoteNotes, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    addItem(params: IAddQuoteItem, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    addItems(params: IAddQuoteItem, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    updateItemQuantity(params: IUpdateQuoteItemQuantity, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    removeItem(params: IRemoveQuoteItem, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    availableShippingMethods(params?: IQuery, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    eligibleFulfillmentMethods(params: IGetQuote, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    availablePaymentMethods(params?: IQuery, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    setPickupDate(params: IQuoteSetPickupDate, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    clearOrderFulfillment(params: IQuoteClearOrderFulfillment, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    addShippingAddress(params: IQuoteShippingAddress, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    addShippingAddressUsingAccountAddress(params: IQuoteAddShippingAddressUsingAccountAddress, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    addBillingAddressUsingAccountAddress(params: IQuoteAddBillingAddressUsingAccountAddress, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    addShippingMethod(params: IQuoteAddShippingMethod, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    addPickupLocation(params: IQuoteAddPickupLocation, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    updateFulfillment(params: IQuoteUpdateFulfillment, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    applyPromoCode(params: IQuoteApplyPromoCode, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    removePromoCode(params: IQuoteRemovePromoCode, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    addBillingAddress(params: IQuoteAddBillingAddress, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    addNewAccountAndSetAsBillingAddress(params?: any, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    addEditAccountAndSetAsBillingAddress(params?: any, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    addNewAddressAndAttachAsShipping(params?: any, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    addEditAddressAndAttachAsShipping(params?: any, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    addPayment(params: IQuoteAddPayment, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    removePayment(params: IQuoteRemovePayment, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    placeOrder(params: IQuotePlaceOrder, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    clear(params?: IQuery, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    delete(params: IGetQuote, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    list(params?: IQuery, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    createQuote(params: ICreateQuote, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    updateQuote(params: IQuoteUpdate, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    convertCartToQuote(params?: IQuery, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
    submitQuoteForApproval(params: IQuoteSubmitForApproval, headers?: IHeaders, source?: any): Promise<IQuotesResult>;
}
