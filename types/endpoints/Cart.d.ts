import BaseEndpoint from '../BaseEndpoint';
import { IOrderResult } from '../interfaces/Order';
import { IQuery } from '../interfaces/Query';
import { ICartClear, ICartUpdateNotes, ICartAddItem, ICartAddItems, ICartUpdateItemQuantity, ICartRemoveItem, ICartAddProductBundleBuild, ICartAvailableShippingMethods, ICartAddShippingAddress, ICartAddShippingAddressUsingAccountAddress, ICartAddBillingAddressUsingAccountAddress, ICartAddShippingMethod, ICartAddPickupLocation, ICartUpdateFulfillment, ICartSetPickupDate, ICartClearOrderFulfillment, ICartApplyPromoCode, ICartRemovePromoCode, ICartAddBillingAddress, ICartAddPayment, ICartRemovePayment, ICartPlaceOrder } from '../interfaces/requests/index';
import { IHeaders } from '../SDKScope';
export default class Cart extends BaseEndpoint {
    get(params?: IQuery, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addCartToSession(params?: any, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    clear(params: ICartClear, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    getPayPalClientConfigForCart(headers?: IHeaders, source?: any): Promise<IOrderResult>;
    createPayPalAccountPaymentMethod(params?: IQuery, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    updateNotes(params: ICartUpdateNotes, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addItem(params: ICartAddItem, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addItems(params: ICartAddItems, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    updateItemQuantity(params: ICartUpdateItemQuantity, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    removeItem(params: ICartRemoveItem, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addProductBundleBuild(params: ICartAddProductBundleBuild, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    availableShippingMethods(params: ICartAvailableShippingMethods, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    eligibleFulfillmentMethods(headers?: IHeaders, source?: any): Promise<IOrderResult>;
    availablePaymentMethods(params?: IQuery, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    setPickupDate(params: ICartSetPickupDate, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    clearOrderFulfillment(params: ICartClearOrderFulfillment, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    appliedPromotionCodes(params?: IQuery, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    appliedPayments(params?: IQuery, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addShippingAddress(params: ICartAddShippingAddress, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addShippingAddressUsingAccountAddress(params: ICartAddShippingAddressUsingAccountAddress, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addBillingAddressUsingAccountAddress(params: ICartAddBillingAddressUsingAccountAddress, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addShippingMethod(params: ICartAddShippingMethod, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addPickupLocation(params: ICartAddPickupLocation, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    updateFulfillment(params: ICartUpdateFulfillment, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    applyPromoCode(params: ICartApplyPromoCode, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    removePromoCode(params: ICartRemovePromoCode, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addBillingAddress(params: ICartAddBillingAddress, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addNewAccountAndSetAsBillingAddress(params?: any, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addEditAccountAndSetAsBillingAddress(params?: any, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addNewAddressAndAttachAsShipping(params?: any, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addEditAddressAndAttachAsShipping(params?: any, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addPayment(params: ICartAddPayment, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    addGiftCardPayment(params: ICartAddPayment, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    removePayment(params: ICartRemovePayment, headers?: IHeaders, source?: any): Promise<IOrderResult>;
    placeOrder(params: ICartPlaceOrder, headers?: IHeaders, source?: any): Promise<IOrderResult>;
}
